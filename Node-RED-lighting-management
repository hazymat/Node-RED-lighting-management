[{"id":"8ee756d3.15bbc8","type":"subflow","name":"Trigger Scene","info":"","category":"","in":[{"x":40,"y":80,"wires":[{"id":"a4562a09.4384f8"}]}],"out":[{"x":340,"y":80,"wires":[{"id":"a4562a09.4384f8","port":0}]}],"env":[],"color":"#DDAA99"},{"id":"a4562a09.4384f8","type":"function","z":"8ee756d3.15bbc8","name":"trigger scene","func":"// determine zone based on incoming MQTT path\n// this relies on matching up the MQTT path with the \"set msg.zoneid\"\n\n// Validate message format (Off | On | int 0-100)\n// We store a current\n\nif (typeof msg.payload === 'string' || msg.payload instanceof String) {\n    // it's a string\n    if (msg.payload.toLowerCase() === \"off\") {\n        msg.payload = 0\n    } else if (msg.payload.toLowerCase() === \"on\") {\n        msg.payload = 1\n    } else if (!isNaN(parseInt(msg.payload))) { // i.e. if payload was a string with a number\n        // msg.payload = parseInt(msg.payload)     // i.e. set payload to an actual number\n    } else {\n        // It's a string that is NOT on, off, or a number\n        return\n    }\n}\n\nif (typeof msg.payload === 'boolean') {\n    if (!msg.payload) msg.payload = 0\n    if (msg.payload) msg.payload = 1\n}\n\n// hopefully we should have an int now\n\nif (msg.payload <= 100 && msg.payload >= 0) {\n    msg.payload = msg.payload.toString()\n\n    // *************** THIS IS WHERE IT'S COMING FROM :) \n    // node.warn(msg.payload)\n\n    // ABOVE: dirty hack. Improve it. We are converting back to string.\n    //    the scene gets stored as a string\n    //    we should store it as number, but it doesn't work if we do\n    \n    var topic = msg.topic.split(\"/\")\n    if (topic[0] === \"home\" && topic[1] === \"light\" && topic[3] == \"scene\") {\n        msg.zone = topic[2]\n        msg.topic = msg.payload\n        msg.action = \"triggerscene\"\n        return msg;\n    }    \n    \n} \n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":80,"wires":[[]]},{"id":"8d766ae8.a58e68","type":"subflow","name":"Store Scene Config Updates","info":"","category":"","in":[{"x":40,"y":80,"wires":[{"id":"5a0f9c56.931a44"}]}],"out":[{"x":520,"y":80,"wires":[{"id":"5a0f9c56.931a44","port":0},{"id":"4a831bce.663f14","port":0}]}],"env":[],"color":"#DDAA99"},{"id":"5a0f9c56.931a44","type":"function","z":"8d766ae8.a58e68","name":"Scene Manage","func":"// 2 outputs feed back into the form.\n// The second output is the same msg, but with some reset, and a 5 second delay\n\nvar msg2 = {};\nfunction reset_form() {\n    // A function that resets the form\n    msg2.notify = false;\n    flow.set(\"scenetodelete\",undefined)\n    flow.set(\"scenetodefault\",undefined)\n    flow.set(\"newscene\",undefined)\n    // reset the input boxes\n    msg2.someModel = \"\"\n    msg2.sceneid = \"\"\n    msg2.scenefriendly = \"\"\n}\n\n// ** Get inputs **\n// ****************\n// for each keypress, update the temporary variable, ready to store in global once button is pressed\nif (msg.action == \"update_sceneid\") flow.set(\"newscene.ID\", msg.sceneid);\nif (msg.action == \"update_scenefriendly\") flow.set(\"newscene.friendly_name\", msg.scenefriendly);\nif (msg.action == \"select_to_delete\") flow.set(\"scenetodelete\", msg.name);\nif (msg.action == \"select_to_default\") flow.set(\"scenetodefault\", msg.name);\n\n\n// ** Create New Scene **\n// **********************\nif (msg.action == \"new_scene\") {\n\n    // check form was filled in properly\n    if (typeof flow.get(\"newscene\") == 'undefined') {\n        msg.notification = \"You didn't enter anything - scene not saved\"\n\t    msg.notify = true\n        reset_form();\n    \treturn [msg, msg2]\n    }\n    \n    // now we can assume the temporary \"interim\" newscene object exists (some part of form was filled)\n    var newscene = flow.get(\"newscene\")\n    \n    // if form not complete\n    if (typeof newscene.ID == 'undefined' ||\n               newscene.ID === \"\" ||\n        typeof newscene.friendly_name == 'undefined' ||\n               newscene.friendly_name === \"\") {\n        msg.notification = \"Missing info - scene not saved\"\n        msg.notify = true\n        reset_form();\n    \treturn [msg, msg2]\n    }\n    \n    // if we've got this far, we have a good new zone to add\n    // create global zones object if it's not there\n    if (typeof global.get(\"home.light.config.zones.\" + msg.zone + \".scenes\") == 'undefined') {\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes\", {})\n    }\n    \n    // get scenes object\n    var scenes = global.get(\"home.light.config.zones.\" + msg.zone + \".scenes\")\n\n    // does scene ID exist?\n    if (scenes.hasOwnProperty(newscene.ID)) {\n        msg.notification = \"oops, ID already exists\"\n        msg.notify = true\n        reset_form();\n    \treturn [msg, msg2]\n    } else {\n        d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n        \n        // for each fixture in the zone, COPY (don't reference) the whole fixture object into the above\n        var scenesettings = {}\n        var mappings = global.get(\"home.light.config.fixture_zone_mappings\")\n        var fixtures = global.get(\"home.light.config.fixtures\")\n        Object.keys(mappings).forEach(key => {\n            if (mappings[key].zoneID == msg.zone) { // mapping for this zone\n                // using the fixtureID (mappings[key].fixtureID), copy some\n                // contents:\n                // fixtures[mappings[key].fixtureID].type and\n                // fixtures[mappings[key].fixtureID].current_setting\n                // to a new object\n                // then push that new object into the scenes one above\n                scenesettings[mappings[key].fixtureID] = JSON.parse(JSON.stringify(fixtures[mappings[key].fixtureID].current_setting))\n            }\n        })\n\n        scenes[newscene.ID] = {\n            \"friendly_name\": newscene.friendly_name,\n            \"created_date\": d,\n            \"created_time\": t,\n            \"settings\": scenesettings\n        }\n\n        // Set the scene (I mean, don't literally \"set the scene\" in a romantic way, but rather \"store this new scene object\")\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes\", scenes)\n\n        // Let's flag up the fact this newly stored scene is actually currently selected (i.e. lit up in the room) AND we haven't yet\n        // deviated from it by moving sliders etc.\n        global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene\", newscene.ID)\n        global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene_edited\", false)\n\n        // Validation message\n        msg.notification = \"Success - added scene\"\n        msg.notify = true\n        // now remove item from flow context, otherwise our\n        // validation tests above will always pass\n        flow.set(\"newscene\", undefined);\n        reset_form();\n    \treturn [msg, msg2]\n    }        \n}\n\n// ** Delete Scene **\n// ******************\nif (msg.action == \"deletescene\") {\n    var scenetodelete = flow.get(\"scenetodelete\")\n    global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + scenetodelete, undefined)\n    reset_form();\n\treturn [msg, msg2]\n}\n\n// ** Set Scene to Default (for sensors) **\n// Lazy me - I am reusing \"scenetodelete\"\n// ******************\nif (msg.action == \"defaultscene\") {\n    var scenetodefault = flow.get(\"scenetodelete\")\n    global.set(\"home.light.config.zones.\" + msg.zone + \".defaultscene\", scenetodefault)\n    reset_form();\n    return [msg, msg2]\n}\n\n\n// ** Update Scene **\n\n// ******************\nif (msg.action == \"updatescene\") {\n    var sceneidtoupdate = flow.get(\"scenetodelete\")\n\n    // get scenes object\n    var scenetoupdate = global.get(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate)\n    // for each fixture in the zone, COPY (don't reference) the whole fixture object into the above\n    var updatedscenesettings = {}\n    var updatedmappings = global.get(\"home.light.config.fixture_zone_mappings\")\n    var updatedfixtures = global.get(\"home.light.config.fixtures\")\n    Object.keys(updatedmappings).forEach(key => {\n        if (updatedmappings[key].zoneID == msg.zone) { // mapping for this zone\n            updatedscenesettings[updatedmappings[key].fixtureID] = JSON.parse(JSON.stringify(updatedfixtures[updatedmappings[key].fixtureID].current_setting))\n        }\n    })\n    // Let's flag up the fact this newly stored scene is actually currently selected (i.e. lit up in the room) AND we haven't yet\n    // deviated from it by moving sliders etc.\n    global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene\", sceneidtoupdate)\n    global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene_edited\", false)\n\n    scenetoupdate.settings = updatedscenesettings;\n    global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate, scenetoupdate)\n\n    // was a new scene name entered? Update if so.\n    if (flow.get(\"newscene.friendly_name\") !== undefined && flow.get(\"newscene.friendly_name\") !== \"\") {\n        var scene1 = global.get(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate)\n        var newname = flow.get(\"newscene.friendly_name\")\n        scene1.friendly_name = newname\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate,scene1)\n    }\n    \n    // was a new scene ID entered? Updated if so.\n    if (flow.get(\"newscene.ID\") !== undefined && flow.get(\"newscene.ID\") !== \"\") {\n        var scene2 = JSON.parse(JSON.stringify(global.get(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate)));\n        var newid = flow.get(\"newscene.ID\")\n        // delete the old sceneid\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + sceneidtoupdate,undefined)\n        global.set(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + newid,scene2)\n        // Update the current scene selected with the new ID \n        global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene\", newid)\n   }\n\n    msg.notification = \"Success - updated scene\"\n    msg.notify = true\n    reset_form();\n\treturn [msg, msg2]\n\n}\n\n\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":80,"wires":[[],["4a831bce.663f14"]]},{"id":"4a831bce.663f14","type":"delay","z":"8d766ae8.a58e68","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":380,"y":160,"wires":[[]]},{"id":"2aa5ea75.282586","type":"subflow","name":"Actuate and Store Light","info":"","category":"","in":[{"x":80,"y":140,"wires":[{"id":"86ad8058.ed055"},{"id":"8415b6e1.d61898"},{"id":"e914dc30.12a3a"}]}],"out":[{"x":520,"y":60,"wires":[{"id":"86ad8058.ed055","port":0},{"id":"e914dc30.12a3a","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"86ad8058.ed055","type":"function","z":"2aa5ea75.282586","name":"Actuate Light","func":"// msg.action = bri | col | switch | up | down | triggerscene\n// msg.topic = the light fixture etc.\n// msg.payload = the value\n\nfunction hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\n// Whole Scene Dimming\nif (msg.action === \"up\" || msg.action === \"down\") {\n    global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene_edited\",true) // show that we have deviated from scene settings\n    msg.fixturesettings = {}\n    mappings = global.get(\"home.light.config.fixture_zone_mappings\")\n    fixtures = global.get(\"home.light.config.fixtures\")\n    // only for these fitting types, get the brightness of each fitting in the zone\n    Object.keys(mappings).forEach(key => {\n        if (mappings[key].zoneID == msg.zone) {\n            if (fixtures[mappings[key].fixtureID].type === \"2_single_colour\" ||\n            fixtures[mappings[key].fixtureID].type === \"3_RGB\" ||\n            fixtures[mappings[key].fixtureID].type === \"4_RGBW\" ||\n            fixtures[mappings[key].fixtureID].type === \"5_RGBWW\") {\n                msg.fixturesettings[mappings[key].fixtureID] = {\n                    \"brightness\":fixtures[mappings[key].fixtureID].current_setting.brightness\n                }\n            }\n        }\n    })\n    Object.keys(msg.fixturesettings).forEach(key => {\n        // for each fitting in the zone (as fetched by above), change the light level and store it\n        if (msg.action === \"up\") {\n            msg.fixturesettings[key].brightness = msg.fixturesettings[key].brightness + msg.adjval\n            if (msg.fixturesettings[key].brightness > 100) msg.fixturesettings[key].brightness = 100\n        }\n        if (msg.action === \"down\") {\n            msg.fixturesettings[key].brightness = msg.fixturesettings[key].brightness - msg.adjval\n            if (msg.fixturesettings[key].brightness < 0) msg.fixturesettings[key].brightness = 0\n        }\n        // actuate the fixture AND store its new setting to memory\n        global.set(\"home.light.config.fixtures.\" + key + \".current_setting.brightness\",msg.fixturesettings[key].brightness)\n        // Actuate over MQTT\n        msg.topic = \"home/light/\" + key + \"/cmd/bri\"\n        msg.payload = msg.fixturesettings[key].brightness\n        node.send([null,msg])\n    })\n    // send something to the main output (not MQTT) to update the UI\n    return ([{\"payload\":\"\",\"topic\":\"\"},null])\n}\n    \n// Actuate switches\nif (msg.action == \"switch\") {\n    global.set(\"home.light.config.fixtures.\" + msg.topic + \".current_setting.state\", msg.state)\n    global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene_edited\",true) // show that we have deviated from scene settings\n    // MQTT\n    msg.topic = \"home/light/\" + msg.topic + \"/cmd/state\"\n    msg.payload = msg.state\n    // send something to the main output (not MQTT) to update the UI\n    // send the MQTT message as well\n    return ([{\"payload\":\"\",\"topic\":\"\"},msg])\n\n}\n\n// Actuate dimmers\nif (msg.action == \"bri\") {\n    global.set(\"home.light.config.fixtures.\" + msg.topic + \".current_setting.brightness\", msg.brightness)\n    global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene_edited\",true) // show that we have deviated from scene settings\n    // MQTT\n    msg.topic = \"home/light/\" + msg.topic + \"/cmd/bri\"\n    msg.payload = msg.brightness\n    // send something to the main output (not MQTT) to update the UI\n    // send the MQTT message as well\n    return ([{\"payload\":\"\",\"topic\":\"\"},msg])\n}\n\n// Actuate color selection\nif (msg.action == \"col\") {\n    // MQTT\n    r = hexToRgb(msg.colour).r\n    g = hexToRgb(msg.colour).g\n    b = hexToRgb(msg.colour).b\n    // store colour to memory\n    var rgbsettings = [r,g,b]\n    global.set(\"home.light.config.fixtures.\" + msg.topic + \".current_setting.rgb\", rgbsettings)\n    global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene_edited\",true) // show that we have deviated from scene settings\n    // change topic and payload ready to pass it over to mqtt\n    msg.topic = \"home/light/\" + msg.topic + \"/cmd/col\"\n    msg.payload = {rgb: [r,g,b]}\n    // send something to the main output (not MQTT) to update the UI\n    // send the MQTT message as well\n    return ([{\"payload\":\"\",\"topic\":\"\"},msg])\n}\n\n// Actuate Scene Selection buttons (or other incoming scene trigger)\nif (msg.action == \"triggerscene\") {\n    // msg.topic is the ID of the scene\n    // msg.zone is the id of the zone that the scene applies to\n    // i.e. light.config.zones.[msg.zone].scenes.[msg.topic]\n\n    // Send a scene change \"result\" message, which is an MQTT output saying \"scene was changed to xyz\" so\n    // that we can monitor when a scene was changed for other purposes\n    // e.g. to send to other control panels,  and to update the \"dim to scene x\" memory\n    var msgresult = {\n        topic: \"home/light/\" + msg.zone + \"/scenechanged\",\n        payload: msg.topic\n    }\n    node.send([null,msgresult])\n\n    // Set this as the default scene. We could remove this if we always want the scene to come on to the same thing\n    // (or use the manual setting in dashboard)\n    if (msg.topic != \"0\") {\n        global.set(\"home.light.config.zones.\" + msg.zone + \".defaultscene\", msg.topic)\n    }\n    // store the current scene ID to memory, i.e. to show we are currently on that scene\n    global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene\",msg.topic)\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    global.set(\"home.light.config.zones.\" + msg.zone + \".sceneselect_date\",d)\n    global.set(\"home.light.config.zones.\" + msg.zone + \".sceneselect_time\",t)\n    global.set(\"home.light.config.zones.\" + msg.zone + \".currentscene_edited\",false) // show that we have no longer deviated from scene settings\n\n    // get the scene settings\n    var fixturesettings = global.get(\"home.light.config.zones.\" + msg.zone + \".scenes.\" + msg.topic + \".settings\");\n\n    // fixturesettings now contains all fixtures and the settings they would have for the scene that was just selected\n\n    // now for each fixture that has settings\n    Object.keys(fixturesettings).forEach(key => {\n        // actuate the fixture AND store its new setting to memory\n        // start with state (for on/off switches only)\n        if (fixturesettings[key].state !== undefined) {\n            global.set(\"home.light.config.fixtures.\" + key + \".current_setting.state\", fixturesettings[key].state)\n            msg.topic = \"home/light/\" + key + \"/cmd/state\"\n            msg.payload = fixturesettings[key].state\n            node.send([null,msg])\n        }\n        // I think we need to check that this one is not undefined like the one below! (i.e. not all fixtures have brightness)\n        if (fixturesettings[key].brightness !== undefined) {\n            global.set(\"home.light.config.fixtures.\" + key + \".current_setting.brightness\",fixturesettings[key].brightness)\n            // Actuate over MQTT\n            msg.topic = \"home/light/\" + key + \"/cmd/bri\"\n            msg.payload = fixturesettings[key].brightness\n            node.send([null,msg])\n        }\n        if (fixturesettings[key].rgb !== undefined) {\n            // MQTT\n            r = fixturesettings[key].rgb[0]\n            g = fixturesettings[key].rgb[1]\n            b = fixturesettings[key].rgb[2]\n            // store colour to memory\n            global.set(\"home.light.config.fixtures.\" + key + \".current_setting.rgb[0]\", r)\n            global.set(\"home.light.config.fixtures.\" + key + \".current_setting.rgb[1]\", g)\n            global.set(\"home.light.config.fixtures.\" + key + \".current_setting.rgb[2]\", b)\n            // change topic and payload ready to pass it over to mqtt\n            msg.topic = \"home/light/\" + key + \"/cmd/col\"\n            msg.payload = {rgb: [r,g,b]}\n            node.send([null,msg])\n        }\n    })\n\n    // we already sent MQTT messages, now send one to update the UI\n    return ([{\"payload\":\"\",\"topic\":\"\"},null])\n}\n\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":230,"y":140,"wires":[[],["f654b0bc.bd114"]]},{"id":"f654b0bc.bd114","type":"mqtt out","z":"2aa5ea75.282586","name":"","topic":"","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"b144405e.a9f63","x":710,"y":140,"wires":[]},{"id":"8415b6e1.d61898","type":"function","z":"2aa5ea75.282586","name":"Handle Sensor Buttons","func":"// Do NOT return msg at the end, it's returned in the first function\n// Messages come from the sensor instances in dashboard, and have various msg.action properties as below\n// For these actions, msg.topic is always the sensor ID\n\n\n// Deal with Dashboard sensor settings\nif (msg.action === \"toggle_arm_pir\") {\n    global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.pir_arm\",!global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.pir_arm\"))\n}\nif (msg.action === \"toggle_arm_microwave\") {\n    global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.microwave_arm\",!global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.microwave_arm\"))\n}\nif (msg.action === \"toggle_arm_audiotrig\") {\n    global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.audio_trigger_arm\",!global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.audio_trigger_arm\"))\n}\nif (msg.action === \"toggle_arm_audioextend\") {\n    global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.audio_extend_arm\",!global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.audio_extend_arm\"))\n}\nif (msg.action === \"toggle_arm_leds\") {\n    ledstatus = global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.leds_on\")\n    ledstatus = !ledstatus // toggle it\n    global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.leds_on\",ledstatus)\n    // kill all LEDs if it was turned off just now\n    if (!ledstatus) {\n        ip = global.get(\"home.light.config.sensors.\" + msg.topic + \".led_IP\")\n        if (ip != undefined) {\n            node.send([null,{\"topic\":\"pirLED\", \"payload\":false, \"led_IP\":ip}])\n            node.send([null,{\"topic\":\"micLED\", \"payload\":false, \"led_IP\":ip}])\n            node.send([null,{\"topic\":\"audLED\", \"payload\":false, \"led_IP\":ip}])\n        }\n    }\n}\nif (msg.action === \"set_audio_threshold\") {\n    global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.audio_threshold\",msg.audio_threshold)\n    // Configure Tasmota to set the audio threshold\n    msg.payload =  msg.audio_threshold.toString()\n    msg.topic = \"sonoffs/\" + msg.topic + \"/cmnd/pwm\"\n    return [msg,null]\n}\nif (msg.action === \"set_lux_threshold\") {\n    global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.lux_threshold\",msg.lux_threshold)\n}\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":180,"wires":[["f654b0bc.bd114"],["d03ee2b0.d10bd"]]},{"id":"9b084b13.729278","type":"comment","z":"2aa5ea75.282586","name":"Concurrency issues?","info":"In what order are these evaluated?\n\ne.g. the first function returns the message, which in turn updates the dashboard\n\nThe second function writes to global context, and we rely on the dashboard update happening from the first function.\n\nWhat if it doesn't happen in time?\n\nSeems fine for now though.","x":180,"y":20,"wires":[]},{"id":"e914dc30.12a3a","type":"function","z":"2aa5ea75.282586","name":"Handle Sensor Timer","func":"// Do NOT return msg at the end, it's returned in the first function\n\n// Deal with Dashboard sensor settings\nif (msg.action === \"set_sensor_timer\") {\n    global.set(\"home.light.config.zones.\" + msg.zone + \".sensor_timer\",msg.sensor_timer)\n}\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":100,"wires":[[]]},{"id":"d03ee2b0.d10bd","type":"function","z":"2aa5ea75.282586","name":"Output to Sensor LEDs","func":"// Turn the multisensor lights on\n\nswitch (msg.payload) {\n    case false : {\n        switch (msg.topic) {\n            case \"pirLED\" : msg.payload = {\"seg\":{\"i\":[6,[0,0,0]]}}; break;\n            case \"micLED\" : msg.payload = {\"seg\":{\"i\":[7,[0,0,0]]}}; break;\n            case \"audLED\" : msg.payload = {\"seg\":{\"i\":[8,[0,0,0]]}}; break;\n        }\n    } break;\n    case true  : {\n        switch (msg.topic) {\n            case \"pirLED\" : msg.payload = {\"seg\":{\"i\":[6,[0,10,0]]}}; break;\n            case \"micLED\" : msg.payload = {\"seg\":{\"i\":[7,[10,0,0]]}}; break;\n            case \"audLED\" : msg.payload = {\"seg\":{\"i\":[8,[221,114,48]]}}; break;\n        }\n    } break;\n}\n\nmsg.url = \"http://\" + msg.led_IP + \"/json/state\"\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":240,"wires":[["af24f9d2.9b1458"]]},{"id":"af24f9d2.9b1458","type":"http request","z":"2aa5ea75.282586","name":"Action Sensor LEDs (HTTP)","method":"POST","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":800,"y":240,"wires":[[]]},{"id":"11371068.5599d","type":"subflow","name":"Get UI","info":"","category":"","in":[{"x":60,"y":120,"wires":[{"id":"16a60efe.21eba1"}]}],"out":[{"x":960,"y":80,"wires":[{"id":"ddbaff70.fc5e2","port":0}]},{"x":960,"y":160,"wires":[{"id":"44a04413.1add7c","port":0}]}],"env":[{"name":"zonename","type":"str","value":""},{"name":"show_zone_adjustment","type":"bool","value":"true"}],"meta":{},"color":"#DDAA99","outputLabels":["To Scene Control","To Scene Management"],"icon":"font-awesome/fa-lightbulb-o"},{"id":"df9ff651.777018","type":"function","z":"11371068.5599d","name":"Get Scene Management UI","func":"// msg.zoneid incoming\n\n// get zone name\n// msg.payload = global.get(\"home.light.config.zones.\" + msg.zoneid + \".friendly_name\")\nmsg.scenes = global.get(\"home.light.config.zones.\" + msg.zoneid + \".scenes\")\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":480,"y":240,"wires":[["44a04413.1add7c"]]},{"id":"16a60efe.21eba1","type":"change","z":"11371068.5599d","name":"set zoneid","rules":[{"t":"set","p":"zoneid","pt":"msg","to":"zonename","tot":"env"},{"t":"set","p":"show_zone_adjustment","pt":"msg","to":"show_zone_adjustment","tot":"env"}],"action":"","property":"","from":"","to":"","reg":false,"x":210,"y":120,"wires":[["df9ff651.777018","bab74631.cde798"]]},{"id":"44a04413.1add7c","type":"template","z":"11371068.5599d","name":"","field":"template","fieldType":"msg","format":"handlebars","syntax":"plain","template":"<style>\n    input {\n        width:150px;\n        margin:0 22px 0 0;\n        display:inline;\n        border-color: #eeeeee;\n        color: #eeeeee;\n        border-bottom-width: 1px;\n        font-family: inherit;\n        background: none;\n        padding: 2px 2px 1px;\n        border-width: 0 0 1px;\n        line-height: 26px;\n        height: 40px;\n        -ms-flex-preferred-size: 26px;\n        border-radius: 0;\n        border-style: solid;\n        box-sizing: border-box;\n        float: left;\n    }\n    .scenemanageselect {\n        width:40%;\n        margin: 0 20px 0 0;\n    }\n\n    md-select span {\n        color:#eee;\n    }\n    md-select .md-select-value.md-select-placeholder  {\n        border-bottom-color: #eee;\n    }\n    .md-select-value .md-select-icon:after {\n        border-bottom-color: #eee;\n        color:#eee;\n    }\n    md-select.md-default-theme .md-select-value, md-select .md-select-value {\n        border-bottom-color: #eee;\n    }\n    md-select.md-default-theme:not([disabled]):focus .md-select-value, md-select:not([disabled]):focus .md-select-value {\n        border-bottom-color: #0eb8c0;\n        border-bottom-width: 1px;\n    }\n    .md-button {\n        height:38px;\n    }\n    .md-container {\n\n    }\n    .deletebutton {\n        display:inline !important;padding:10px;height:38px !important;\n        width:120px;\n        margin:0 20px 0 0 !important;\n        background-color:rgb(153, 71, 0, 0.65) !important;\n    }\n    .updatebutton {\n        display:inline !important;padding:10px;height:38px !important;\n        width:120px;\n        margin:0 20px 0 0 !important;\n        background-color:rgb(153, 144, 0) !important;\n    }\n    .control-row {\n        display:inline-flex; margin: 10px 0 10px 0\n    }\n\n</style>\n\n<!--New Scene-->\n<div class=\"control-row\">\n    <input type=\"text\" placeholder=\"Scene ID\" ng-model=\"msg.sceneid\" name=\"string\" ng-change=\"send({action: 'update_sceneid', sceneid: msg.sceneid})\"  />\n    <input type=\"text\" placeholder=\"Scene Name\" ng-model=\"msg.scenefriendly\" name=\"string\" ng-change=\"send({action: 'update_scenefriendly', scenefriendly: msg.scenefriendly})\" />\n    <md-button style=\"width: 100px; height:40px; display:inline\" ng-click=\"send({action: 'new_scene', zone: msg.zoneid})\">Save</md-button>\n</div>\n\n\n<div ng-if=\"msg.notify === true\">{{msg.notification}}</div>\n\n\n<!--Delete / Update Scene-->\n<div class=\"control-row\">\n    <md-select ng-model=\"msg.someModel\" placeholder=\"Select a scene\" class=\"scenemanageselect\"><md-option ng-value=\"key\" ng-repeat=\"(key, value) in msg.scenes\" ng-click=\"send({action: 'select_to_delete', name: key})\">{{value.friendly_name}} - (ID = {{key}})</md-option></md-select>\n    <md-button ng-click=\"send({action: 'updatescene', zone: msg.zoneid})\" class=\"updatebutton\" >Update</md-button>\n    <md-button ng-click=\"send({action: 'deletescene', zone: msg.zoneid})\" class=\"deletebutton\" >Delete</md-button>\n    <md-button ng-click=\"send({action: 'defaultscene', zone: msg.zoneid})\" class=\"defaultbutton\" >Default</md-button>\n</div>\n\n","output":"str","x":820,"y":240,"wires":[[]]},{"id":"ab7e3243.4c0d2","type":"comment","z":"11371068.5599d","name":"changes to the template","info":"changes seem to need an additional restart of node-red (i.e. message coming in at restart), can't be bothered to figure out why","x":840,"y":40,"wires":[]},{"id":"b1190d27.f7a18","type":"inject","z":"11371068.5599d","d":true,"name":"refresh template html","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":180,"y":280,"wires":[["16a60efe.21eba1"]]},{"id":"2bac3ccf.9547e4","type":"debug","z":"11371068.5599d","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":940,"y":320,"wires":[]},{"id":"d94bb229.db51f","type":"inject","z":"11371068.5599d","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":170,"y":200,"wires":[["73a51c95.c94624"]]},{"id":"bab74631.cde798","type":"function","z":"11371068.5599d","name":"Get Light Control and Presence UI (backup)","func":"// This function outputs the scene buttons and individual light sliders for a given zone\n// We set msg.zoneid on the input, to select which zone we want to control\n\n// functions to convert rgb values to hex, required for colour picker\nfunction componentToHex(c) { var hex = c.toString(16);return hex.length == 1 ? \"0\" + hex : hex; }\nfunction rgbToHex(r, g, b) { return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b); }\n\n// get zone name (if we want to display this on the page)\nmsg.payload = global.get(\"home.light.config.zones.\" + msg.zoneid + \".friendly_name\")\n\n// loop through all fixture_zone_mappings, if contained zoneID is same as msg.zoneid\n// then use the contained fixtureID to get the fixture info (friendly name and\n// slider / RGB vals or whatever)\nmsg.fixturesettings = {}\nfixturemappings = global.get(\"home.light.config.fixture_zone_mappings\")\nfixtures = global.get(\"home.light.config.fixtures\")\nObject.keys(fixturemappings).forEach(key => {\n    if (fixturemappings[key].zoneID == msg.zoneid) {\n        msg.fixturesettings[fixturemappings[key].fixtureID] = {\n            \"label\": fixtures[fixturemappings[key].fixtureID].friendly_name,\n            \"resolution\": fixtures[fixturemappings[key].fixtureID].resolution,\n            \"controltype\": fixtures[fixturemappings[key].fixtureID].type,\n            \"setting\":fixtures[fixturemappings[key].fixtureID].current_setting\n        }\n\n        // if RGB then we need to convert RGB vals to hex here and add the\n        // key-value pair to the object above\n        if (\"rgb\" in fixtures[fixturemappings[key].fixtureID].current_setting) {\n            Object.assign(msg.fixturesettings[fixturemappings[key].fixtureID], {\"colour\":rgbToHex(fixtures[fixturemappings[key].fixtureID].current_setting.rgb[0], fixtures[fixturemappings[key].fixtureID].current_setting.rgb[1], fixtures[fixturemappings[key].fixtureID].current_setting.rgb[2])});\n        }\n    }\n})\n// do the same for sensor mappings\nmsg.sensorsettings = {}\nsensormappings = global.get(\"home.light.config.sensor_zone_mappings\")\nsensors = global.get(\"home.light.config.sensors\")\nObject.keys(sensormappings).forEach(key => {\n    if (sensormappings[key].zoneID == msg.zoneid) {\n        msg.sensorsettings[sensormappings[key].sensorID] = {\n            \"label\": sensors[sensormappings[key].sensorID].friendly_location,\n            \"setting\":sensors[sensormappings[key].sensorID].current_setting,\n        }\n            /// Ideally, the audio extend button would light up if there's a noise and the lights are already triggered.\n            /// And audio trigger button would light up when there's a noise when the lights are not triggered.\n            /// The below was an attempt to get that working but it failed. Oh well, not critical. Instead we will light\n            /// up both audio buttons when there's a noise. (In the template node.) Come back to this later!\n        // // if the zone was triggered, then the show audio_extend when there's an audio signal, as opposed to audio_trig\n        // triggered = global.get(\"home.light.config.zones.\" + msg.zoneid + \".triggered\")\n        // if (triggered && msg.sensorsettings[sensormappings[key].sensorID].setting.audio_trigger_on) {\n        //     msg.sensorsettings[sensormappings[key].sensorID].setting.audio_extend_on = true\n        //     msg.sensorsettings[sensormappings[key].sensorID].setting.audio_trigger_on = false\n        // } else if (triggered && !msg.sensorsettings[sensormappings[key].sensorID].setting.audio_trigger_on) {\n        //     msg.sensorsettings[sensormappings[key].sensorID].setting.audio_extend_on = false\n        //     msg.sensorsettings[sensormappings[key].sensorID].setting.audio_trigger_on = true\n        // }\n    }\n})\n\n\n// Here we get the currently selected scene\nmsg.currentscene = global.get(\"home.light.config.zones.\" + msg.zoneid + \".currentscene\")\n\n// Determine if a sensor was attached\nif (Object.keys(msg.sensorsettings).length != 0) {msg.has_sensor = true} else {msg.has_sensor = false}\n\n// Here we get the default scene. It's only defined in cases where a sensor has been mapped to the zone.\nif (global.get(\"home.light.config.zones.\" + msg.zoneid + \".defaultscene\") != undefined) {\n    msg.defaultscene = global.get(\"home.light.config.zones.\" + msg.zoneid + \".defaultscene\")\n}\nif (global.get(\"home.light.config.zones.\" + msg.zoneid + \".sensor_timer\") != undefined) {\n    msg.sensor_timer = global.get(\"home.light.config.zones.\" + msg.zoneid + \".sensor_timer\")\n}\n\n// Here we query whether the settings have been changed since a scene was last selected\nmsg.currentscene_edited = global.get(\"home.light.config.zones.\" + msg.zoneid + \".currentscene_edited\")\n\n// Now we want to list out the scenes for the zone\nmsg.scenesforbuttons = global.get(\"home.light.config.zones.\" + msg.zoneid + \".scenes\")\n\n\n\nmsg.socketid = undefined\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":80,"wires":[["ddbaff70.fc5e2"]]},{"id":"ddbaff70.fc5e2","type":"template","z":"11371068.5599d","name":"","field":"template","fieldType":"msg","format":"handlebars","syntax":"plain","template":"<style>\n    \n    .nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n        margin-top: 0 !important;\n    } \n\n    .zoneadj > .adjlabel {\n        text-align:center;\n        padding:6px 2px 0px 2px;\n    }\n    .zoneadj {\n        display: inline-grid;\n        grid-template-columns: auto auto auto auto auto;\n        grid-gap:2px;\n        margin: 0 10% 27px;\n        background-color:rgb(72,107,123) !important;\n        height:35px;\n    }\n\n    .zoneadj > .md-button {\n        text-align: center;\n        padding: 0;\n        white-space: normal;\n        word-wrap: break-word;\n        width:100%;\n        height:100%;\n        font-size:unset !important;\n    }\n\n    .button-container {\n        margin:0 0 20px 0;\n        display:inline-grid;\n        grid-template-columns: auto auto auto auto auto auto;\n        grid-gap:2px;\n    }\n    \n    .button-container > .scenebutton {\n        font-size:0.6em;\n    }\n\n    .button-container > .scenebutton > .md-button {\n        /*background-color: rgba(255, 255, 255, 0.8);*/\n        text-align: center;\n        padding: 0;\n        white-space: normal;\n        word-wrap: break-word;\n        width:100%;\n        height:100%;\n        font-size:unset !important;\n    }\n    .button-container > .scenebutton > .md-button.currentscene {\n    background-color: #32516f;\n    }\n\n\n    .button-container > .scenebutton > .md-button.defaultscene::before{\n        content: \"♥\";\n        opacity: 100%;\n        color: #ff4343;\n        margin-right: 3px;\n    }\n    .button-container > .scenebutton:nth-child(1) { grid-column-start: 1; grid-column-end: 7; font-size:1.1em; height: 50px;}\n    .button-container > .scenebutton:nth-child(2) { grid-column-start: 1; grid-column-end: 4; font-size:1.1em; height: 65px;}\n    .button-container > .scenebutton:nth-child(3) { grid-column-start: 4; grid-column-end: 7; font-size:1.1em; height: 65px;}\n    .button-container > .scenebutton:nth-child(4) { grid-column-start: 1; grid-column-end: 3; font-size:0.9em; height: 65px;}\n    .button-container > .scenebutton:nth-child(5) { grid-column-start: 3; grid-column-end: 5; font-size:0.9em; height: 65px;}\n    .button-container > .scenebutton:nth-child(6) { grid-column-start: 5; grid-column-end: 7; font-size:0.9em; height: 65px;}\n    .button-container > .scenebutton:nth-child(n+7) {  height:35px;}\n\n    .slider-container {\n    }\n    .slider-row {\n        /*background-color:#3c3c3c;*/\n        height:50px;\n        margin: 0 0 0 0;\n        width:100%;\n        display:inline-block;\n    }\n    .slider-label {\n        float: left;\n        margin: 0 0 0 45px;\n        padding: 2px 0 2px 10px;\n        width: 89%;\n        font-size:0.8em;\n        background-color: #404040;\n    }\n    .slider-label-floating {\n            float: left;\n    height: 50%;\n    width: 100%;\n    margin-bottom: -50px;\n\n    }\n    .slider-label-text{\n    clear: both;\n    /*height: 100px;*/\n\n    }\n    .slider-val {\n        font-size: 12px; color: #999;\n    }\n    .slider-colpick {\n        float: left;\n        margin: 0;\n        width: 5%;\n    }\n    .slider-slider {\n        float: left;\n        margin: -42px 0 0 57px;\n        width: 86%;\n    }\n    md-input-container {\n        margin: 0px !important;\n    }\n    .no-color-picker {\n        height: 38px;\n        width: 36px;\n        background-color: #ddd;\n        border: 1px solid #aaa;\n        margin: -19px 0 0 0;\n        text-align: center;\n        padding: 4px;\n        color:#777;\n    }\n    .picker {\n        height:55px;\n        width:55px;\n        border-color: transparent;\n        background-color: transparent;\n        margin: -25px 0 0 -4px;\n    }\n    .noscene {\n        background-color:#414141;\n        padding:3px 0 3px 10px;\n        font-size:.8em;\n        color:#bbb;\n    }\n    \n    /* Now for the multisensor styles */\n    \n    .audio-threshold-label {\n        float: left;\n        margin: 0;\n        padding: 2px 0 2px 10px;\n        width: 89%;\n        font-size: 0.8em;\n        background-color: #404040;\n    }\n    .audio-threshold-label-text {\n        clear: both;\n    }\n    .lux-threshold-label {\n        float: left;\n        margin: 0;\n        padding: 2px 0 2px 10px;\n        width: 89%;\n        font-size: 0.8em;\n        background-color: #404040;\n    }\n    .lux-threshold-label-text {\n        clear: both;\n    }\n    .delay-slider-container {\n        display:inline;\n    }\n    .sensor-slider-container {\n        width:50%;\n        display:inline;\n        float:left;\n    }\n    .sensorbutton {\n        display:inline !important;\n        padding:0px;height:38px !important;\n        width:85px;\n        margin:0 6px 0 0 !important;\n        background-color: #3b3b3b !important;\n    }\n    .triggered {\n        border-width:2px !important;\n        border-style:solid !important;\n    }\n    .pir {\n        background-color:rgb(33, 109, 55) !important;\n        border-color:rgb(99,200,100);\n        border-style: none;\n    } \n    .microwave {\n        background-color:rgb(134, 54, 54) !important;\n        border-color:rgb(241, 110, 110);\n        border-style: none;\n    }\n    .audiotrig {\n        background-color:rgb(153, 71, 0) !important;\n        border-color:rgb(244, 152, 73);\n        border-style: none;\n    }\n    .audioextend {\n        background-color:rgb(153, 144, 0) !important;\n        border-color:rgb(236,228,99);\n        border-style: none;\n    }\n    .leds {\n        background: -webkit-linear-gradient(left, orange , yellow, green, cyan, blue, violet); /* For Safari 5.1 to 6.0 */\n        background: -o-linear-gradient(right, orange, yellow, green, cyan, blue, violet); /* For Opera 11.1 to 12.0 */\n        background: -moz-linear-gradient(right, orange, yellow, green, cyan, blue, violet); /* For Firefox 3.6 to 15 */\n        background: linear-gradient(to right, #a52a2a, #ff8c00, #006400); /* Standard syntax (must be last) */\n    }\n    \n</style>\n\n<script src=\"/js/iro.min.js\"></script>\n\n<div style=\"display:none\">Zone: {{msg.payload}}</div>\n\n<!-- Scene buttons -->\n<div ng-if=\"msg.hasscenes == false\" class=\"noscene\">No scenes created yet. Please save your first scene.</div>\n<div class=\"button-container\">\n\n    <div ng-repeat=\"(key, value) in msg.scenesforbuttons\" class=\"scenebutton\">\n        <md-button ng-class=\"{'currentscene': key === msg.currentscene, 'defaultscene': key === msg.defaultscene}\" ng-click=\"send({action: 'triggerscene', topic: key, zone: msg.zoneid})\"><span ng-if=\"key === msg.currentscene && msg.currentscene_edited\">* </span>{{value.friendly_name}}</md-button>\n    </div>\n\n    <!--View settings-->\n    <!--<div ng-repeat=\"(key, value) in msg.scenesforbuttons\" style=\"font-size:9px;border:1px solid white;\">{{value.settings}}</div>-->\n<!--</md-input-container>-->\n</div>\n<!-- Master dimmer -->\n<div class=\"zoneadj\" ng-if=\"msg.show_zone_adjustment\">\n    <md-button ng-click=\"send({action: 'down', adjval: 30, zone: msg.zoneid})\">-30</md-button>\n    <md-button ng-click=\"send({action: 'down', adjval: 10, zone: msg.zoneid})\">-10</md-button>\n    <div class=\"adjlabel\">Adjust All</div>\n    <md-button ng-click=\"send({action: 'up', adjval: 10, zone: msg.zoneid})\">+10</md-button>\n    <md-button ng-click=\"send({action: 'up', adjval: 30, zone: msg.zoneid})\">+30</md-button>\n</div>\n<!-- Sliders -->\n<div class=\"slider-container\">\n    <div ng-repeat=\"(key, value) in msg.fixturesettings\" class=\"slider-row\">\n        <div class=\"slider-label\"><div class=\"slider-label-text\">{{value.label}} <span style=\"slider-val\">(<span ng-if=\"value.controltype != '1_non_dim'\">{{value.setting.brightness}}</span><span ng-if=\"value.controltype == '1_non_dim'\">{{(value.setting.state === true) ? 'On' : 'Off'}}</span>)</span></div></div>\n        <div class=\"slider-colpick\"><div ng-if=\"value.controltype != '3_RGB'\" class=\"no-color-picker\">(W)</div><input ng-if=\"value.controltype == '3_RGB'\" class=\"picker\" type=\"color\" ng-model=\"value.colour\" ng-change=\"send({action: 'col', topic: key, colour: value.colour, zone: msg.zoneid})\" /></div>\n        <div class=\"slider-slider\">\n            <div ng-if=\"value.controltype == '1_non_dim'\"><md-switch ng-model=\"value.setting.state\" ng-change=\"send({action: 'switch', topic: key, state: value.setting.state, zone:msg.zoneid})\"></md-switch></div>\n            <div ng-if=\"value.controltype != '1_non_dim'\"><md-slider min=\"0\" max=\"100\" step=\"{{value.resolution}}\" ng-model=\"value.setting.brightness\" ng-change=\"send({action: 'bri', topic: key, brightness: value.setting.brightness, zone:msg.zoneid})\"></md-slider></div>\n        </div>\n    </div>\n</div>\n\n<!-- Sensors -->\n<div class=\"sensorcontainer\" ng-if=\"msg.has_sensor\">\n    <!-- Trigger delay (held in zone object) -->\n    <div class=\"delay-slider-container\">\n        <div class=\"sensor-timer-label\"><div class=\"sensor-timer-label-text\">Sensor Timer <span style=\"slider-val\">{{msg.sensor_timer}}</span></div></div>\n        <md-slider min=\"0\" max=\"600\" step=\"1\" ng-model=\"msg.sensor_timer\" ng-change=\"send({action: 'set_sensor_timer', topic: key, sensor_timer: msg.sensor_timer, zone: msg.zoneid})\"></md-slider>\n    </div>\n\n    <div ng-repeat=\"(key, value) in msg.sensorsettings\">\n        <span style=\"font-size:12px\">{{value.label}} ({{key}})</span>\n        <div class=\"control-row\">\n            <!-- classes as follows: sensorbutton is a button. pir/microwave/etc lights it up. triggered gives it a border -->\n            <md-button class=\"sensorbutton\" ng-class=\"{'pir': value.setting.pir_arm == true,'triggered': value.setting.pir_on == true}\" ng-click=\"send({action: 'toggle_arm_pir', topic: key})\">PIR</md-button>\n            <md-button class=\"sensorbutton\" ng-class=\"{'microwave': value.setting.microwave_arm == true,'triggered': value.setting.microwave_on == true}\" ng-click=\"send({action: 'toggle_arm_microwave', topic: key})\">Micro</md-button>\n            <md-button class=\"sensorbutton\" ng-class=\"{'audiotrig': value.setting.audio_trigger_arm == true,'triggered': value.setting.audio_trigger_on == true}\" ng-click=\"send({action: 'toggle_arm_audiotrig', topic: key})\">Aud Trig</md-button>\n            <md-button class=\"sensorbutton\" ng-class=\"{'audioextend': value.setting.audio_extend_arm == true,'triggered': value.setting.audio_trigger_on == true}\" ng-click=\"send({action: 'toggle_arm_audioextend', topic: key})\">Aud Ext</md-button>\n            <md-button class=\"sensorbutton\" ng-class=\"{'leds': value.setting.leds_on == true}\" ng-click=\"send({action: 'toggle_arm_leds', topic: key})\">LEDS</md-button>\n        </div>\n        \n        <!-- Sliders -->\n        <div>\n            <div class=\"sensor-slider-container\">\n                    <div class=\"audio-threshold-label\"><div class=\"audio-threshold-label-text\">Audio threshold <span style=\"slider-val\">({{value.setting.audio_threshold}})</span></div></div>\n                    <md-slider min=\"10\" max=\"255\" step=\"5\" ng-model=\"value.setting.audio_threshold\" ng-change=\"send({action: 'set_audio_threshold', topic: key, audio_threshold: value.setting.audio_threshold})\"></md-slider>\n            </div>\n            <div class=\"sensor-slider-container\">\n                    <div class=\"lux-threshold-label\"><div class=\"lux-threshold-label-text\">Lux threshold <span style=\"slider-val\">({{value.setting.lux_threshold}})</span></div></div>\n                    <md-slider min=\"0\" max=\"100\" step=\".1\" ng-model=\"value.setting.lux_threshold\" ng-change=\"send({action: 'set_lux_threshold', topic: key, lux_threshold: value.setting.lux_threshold})\"></md-slider>\n            </div>\n        </div>\n\n    </div>\n</div>\n\n\n<!-- \n\n<md-switch ng-model=\"value.setting.state\" ng-change=\"send({action: 'switch', topic: key, state: value.setting.state, zone:msg.zoneid})\" ng-checked=\"value.setting.state==='true'\" ></md-switch>\n-->","output":"str","x":820,"y":80,"wires":[[]]},{"id":"73a51c95.c94624","type":"change","z":"11371068.5599d","name":"set zoneid","rules":[{"t":"set","p":"zoneid","pt":"msg","to":"zonename","tot":"env"},{"t":"set","p":"show_zone_adjustment","pt":"msg","to":"show_zone_adjustment","tot":"env"}],"action":"","property":"","from":"","to":"","reg":false,"x":230,"y":160,"wires":[[]]},{"id":"a38b8274.34b47","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"ID","tooltip":"","group":"1a37e545.435d2b","order":1,"width":3,"height":1,"passthru":false,"mode":"text","delay":"350","topic":"","x":570,"y":140,"wires":[["abe867b3.c73988"]]},{"id":"abe867b3.c73988","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newfixture.ID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":140,"wires":[[]]},{"id":"6b4954c6.ea20dc","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"1a37e545.435d2b","order":5,"width":1,"height":1,"passthru":false,"label":"Save","tooltip":"","color":"","bgcolor":"","icon":"","payload":"nothing","payloadType":"str","topic":"","x":270,"y":180,"wires":[["82c9f15b.0f115"]]},{"id":"157061c7.c9849e","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"Friendly location","tooltip":"","group":"1a37e545.435d2b","order":2,"width":3,"height":1,"passthru":true,"mode":"text","delay":"1000","topic":"","x":600,"y":160,"wires":[["3af16af6.0218a6"]]},{"id":"3af16af6.0218a6","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newfixture.friendly_location","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":160,"wires":[[]]},{"id":"82c9f15b.0f115","type":"function","z":"ccda7ca.4b72e8","name":"New fixture","func":"// Save new fixture entered in Dashboard to global context\n// Includes form validation and duplicate check\n// and supports clearing the form when done correctly\n\n// check form was filled in properly\nif (typeof flow.get(\"newfixture\") == 'undefined') {\n    msg.payload = \"You didn't enter anything - fixture not saved\"\n    msg.error = true\n    return msg\n}\n\n// assume newfixture object exists (some part of form was filled)\nvar newfixture = flow.get(\"newfixture\")\n\n// if form not complete\nif (typeof newfixture.ID == 'undefined' ||\n           newfixture.ID === \"\" ||\n    typeof newfixture.friendly_location == 'undefined' ||\n           newfixture.friendly_location === \"\" ||\n    typeof newfixture.friendly_name == 'undefined' ||\n           newfixture.friendly_name === \"\" ||\n    typeof newfixture.type == 'undefined' ||\n           newfixture.type === \"\" ||\n    typeof newfixture.resolution == 'undefined' ||\n           newfixture.resolution === \"\") {\n    msg.payload = \"Missing info - fixture not saved\"\n    msg.error = true\n    return msg\n}\n\n// if we've got this far, we have a good new fixture to add\n// create global fixtures object if it's not there\nif (typeof global.get(\"home.light.config.fixtures\") == 'undefined') {\n    global.set(\"home.light.config.fixtures\", {})\n}\n\n// get light fixtures object\nvar fixtures = global.get(\"home.light.config.fixtures\")\n\n// does fixture ID exist?\n\nif (fixtures.hasOwnProperty(newfixture.ID)) {\n    msg.payload = \"oops, ID already exists\"\n    msg.error = true\n    return msg\n} else {\n    switch (newfixture.type) {\n        case \"1_non_dim\":\n        \tlightsetting = {\"state\":false}  // i.e. light defaults to off\n        \tbreak;\n        case \"2_single_colour\":\n        \tlightsetting = {\"brightness\":0} // single colour only has brightness setting\n        \tbreak;\n        case \"3_RGB\":\n        \tlightsetting = {\"brightness\":0, rgb: [255, 255, 255]}\n        \tbreak;\n        case \"4_RGBW\":\n        \tlightsetting = {\"brightness\":0, rgbw: [255, 255, 255, 255]}\n        \tbreak;\n        case \"5_RGBWW\":\n        \tlightsetting = {\"brightness\":0, rgbww: [255, 255, 255, 255, 255]}\n        \tbreak;\n        case \"6_individually_addressable\":\n        \tlightsetting = {\"brightness\":0} // god knows what else we will put here later...\n        \tbreak;\n    }\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    fixtures[newfixture.ID] = {\n        \"current_setting\" : lightsetting,\n        \"friendly_location\": newfixture.friendly_location,\n        \"friendly_name\": newfixture.friendly_name,\n        \"type\": newfixture.type,\n        \"resolution\":newfixture.resolution,\n        \"created_date\": d,\n        \"created_time\": t\n    }\n    \n    global.set(\"home.light.config.fixtures\",fixtures)\n    msg.payload = \"Success - added fixture\"\n    msg.error = false\n    // now remove item from flow context, otherwise our\n    // validation tests above will always pass\n    flow.set(\"newfixture\", undefined);\n    \n    return msg\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":220,"wires":[["b3fa17e3.310bb8","e4c053c5.1ee5e"]]},{"id":"5e1a75cc.e74a3c","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Type","label":"","tooltip":"","place":"Control Type","group":"1a37e545.435d2b","order":4,"width":3,"height":1,"passthru":true,"options":[{"label":"Non Dimmable (Switch)","value":"1_non_dim","type":"str"},{"label":"Dimmable Single Colour","value":"2_single_colour","type":"str"},{"label":"RGB","value":"3_RGB","type":"str"},{"label":"RGBW","value":"4_RGBW","type":"str"},{"label":"RGBWW","value":"5_RGBWW","type":"str"},{"label":"Individually Addressable","value":"6_individually_addressable","type":"str"}],"payload":"","topic":"","x":570,"y":220,"wires":[["1c92c181.65c40e"]]},{"id":"1c92c181.65c40e","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newfixture.type","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":220,"wires":[[]]},{"id":"b3fa17e3.310bb8","type":"ui_template","z":"ccda7ca.4b72e8","group":"1a37e545.435d2b","name":"New fixture validation","order":6,"width":"8","height":1,"format":"{{msg.payload}}","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":820,"y":280,"wires":[[]]},{"id":"b5bb9435.f06ff8","type":"delay","z":"ccda7ca.4b72e8","name":"delay clearing form","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":590,"y":280,"wires":[["b3fa17e3.310bb8"]]},{"id":"e4c053c5.1ee5e","type":"function","z":"ccda7ca.4b72e8","name":"Success","func":"// Save new fixture: clear form & result if successful\n\nif (!msg.error) {\n    msg.payload = \"\"\n    return msg;\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":400,"y":260,"wires":[["b5bb9435.f06ff8","a38b8274.34b47","157061c7.c9849e","5e1a75cc.e74a3c","dce03a16.8f99a8","cce713b5.db9a6","e67b2e5d.8da8c"]]},{"id":"33163ec5.a88d22","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newfixture.friendly_name","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":180,"wires":[[]]},{"id":"dce03a16.8f99a8","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"Friendly Fitting Type","tooltip":"","group":"1a37e545.435d2b","order":3,"width":3,"height":1,"passthru":true,"mode":"text","delay":"1000","topic":"","x":620,"y":180,"wires":[["33163ec5.a88d22"]]},{"id":"b7655eb1.6ef5f","type":"change","z":"ccda7ca.4b72e8","name":"Get","rules":[{"t":"set","p":"fixtures","pt":"msg","to":"home.light.config.fixtures","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":1130,"y":200,"wires":[["8c01b9cf.7dcf48"]]},{"id":"8c01b9cf.7dcf48","type":"ui_template","z":"ccda7ca.4b72e8","group":"1a37e545.435d2b","name":"Fixtures List","order":7,"width":"12","height":"10","format":"<h3>Register of Light Fixtures</h3>\n\n<table>\n    <tr style=\"font-weight:800; background-color:rgba(20,20,20,.6);\">\n        <td>ID</td>\n        <td>Location</td>\n        <td>Name</td>\n        <td>Type</td>\n        <td>Resolution</td>\n        <td>Added</td>\n        <td>Delete*</td>\n    </tr>\n    <tr ng-repeat=\"(key, value) in msg.fixtures\">\n        <td>{{key}}</td>\n        <td>{{value.friendly_location}}</td>\n        <td>{{value.friendly_name}}</td>\n        <td>{{value.type}}</td>\n        <td>{{value.resolution}}</td>\n        <td style=\"color:#888;\">{{value.created_time}} {{value.created_date}}</td>\n        <td><md-button ng-click=\"send({action: 'delete', topic: key})\">Del</md-button></td>\n    </tr>\n</table>","storeOutMessages":false,"fwdInMessages":false,"templateScope":"local","x":1270,"y":200,"wires":[["ae3e732b.06d51"]]},{"id":"ae3e732b.06d51","type":"function","z":"ccda7ca.4b72e8","name":"Set","func":"// get object from memory\n// NB we are using \"bracket notation\" just in case the ID\n// (i.e. the object name, represented here as msg.topic)\n// had a space\n\nif (msg.action == \"delete\") {\n    // delete the fixture\n    obj = global.get(\"home.light.config.fixtures\")\n    delete obj[msg.topic]\n    global.set(\"home.light.config.fixtures\", obj)\n\n    // delete any mappings this fixture had to a zone\n    objMappings = global.get(\"home.light.config.fixture_zone_mappings\");\n    Object.keys(objMappings).forEach(key => {\n        if (objMappings[key].fixtureID == msg.topic) {\n            delete objMappings[key]\n        }\n    })\n    \n}\n\nmsg.payload=\"\"\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1410,"y":200,"wires":[["b7655eb1.6ef5f","69ff0c06.2b52d4"]]},{"id":"8a4b0c8d.db677","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"ID","tooltip":"","group":"1386e1df.83b3ae","order":1,"width":3,"height":1,"passthru":false,"mode":"text","delay":"350","topic":"","x":530,"y":660,"wires":[["163381fe.683f9e"]]},{"id":"163381fe.683f9e","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newzone.ID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":730,"y":660,"wires":[[]]},{"id":"722b81dd.3459a","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"1386e1df.83b3ae","order":3,"width":1,"height":1,"passthru":false,"label":"Save","tooltip":"","color":"","bgcolor":"","icon":"","payload":"nothing","payloadType":"str","topic":"","topicType":"str","x":230,"y":660,"wires":[["c82cb558.a0e218"]]},{"id":"c82cb558.a0e218","type":"function","z":"ccda7ca.4b72e8","name":"New zone","func":"// Save new zone entered in Dashboard to global context\n// Includes form validation and duplicate check\n// and supports clearing the form when done correctly\n\n// check form was filled in properly\nif (flow.get(\"newzone\") == 'undefined') {\n    msg.payload = \"You didn't enter anything - zone not saved\"\n    msg.error = true\n    return msg\n}\n\n// assume newzone object exists (some part of form was filled)\nvar newzone = flow.get(\"newzone\")\n\n// if form not complete\nif (typeof newzone.ID == 'undefined' ||\n           newzone.ID === \"\" ||\n    typeof newzone.friendly_name == 'undefined' ||\n           newzone.friendly_name === \"\") {\n    msg.payload = \"Missing info - zone not saved\"\n    msg.error = true\n    return msg\n}\n\n// if we've got this far, we have a good new zone to add\n// create global zones object if it's not there\nif (typeof global.get(\"home.light.config.zones\") == 'undefined') {\n    global.set(\"home.light.config.zones\", {})\n}\n\n// get light zones object\nvar zones = global.get(\"home.light.config.zones\")\n\n// does fixture ID exist?\n\nif (zones.hasOwnProperty(newzone.ID)) {\n    msg.payload = \"oops, ID already exists\"\n    msg.error = true\n    return msg\n} else {\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    zones[newzone.ID] = {\n        \"friendly_name\": newzone.friendly_name,\n        \"created_date\": d,\n        \"created_time\": t\n    }\n    \n    global.set(\"home.light.config.zones\",zones)\n    msg.payload = \"Success - added zone\"\n    msg.error = false\n    // now remove item from flow context, otherwise our\n    // validation tests above will always pass\n    flow.set(\"newzone\", undefined);\n    \n    return msg\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":700,"wires":[["650f57be.ab6cb8","9136d0f1.dee9"]]},{"id":"650f57be.ab6cb8","type":"ui_template","z":"ccda7ca.4b72e8","group":"1386e1df.83b3ae","name":"New zone validation","order":4,"width":"8","height":1,"format":"{{msg.payload}}","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":840,"y":720,"wires":[[]]},{"id":"8c81fc43.b80e5","type":"delay","z":"ccda7ca.4b72e8","name":"delay clearing form","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":590,"y":740,"wires":[["650f57be.ab6cb8"]]},{"id":"9136d0f1.dee9","type":"function","z":"ccda7ca.4b72e8","name":"Success","func":"// Save new zone: clear form & result if successful\n\nif (!msg.error) {\n    msg.payload = \"\"\n    return msg;\n}\n","outputs":1,"noerr":0,"x":360,"y":740,"wires":[["8c81fc43.b80e5","8a4b0c8d.db677","40796360.d8e44c","53c29071.edb86"]]},{"id":"6bb02cec.a26d14","type":"ui_template","z":"ccda7ca.4b72e8","group":"1386e1df.83b3ae","name":"Zones List","order":5,"width":"12","height":"10","format":"<style>\n    table {border: none;}\n    .nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n    }\n    .nr-dashboard-theme .nr-dashboard-template .md-button {\n    margin-right: 0 10px 0 0;\n    min-height: 0;\n    min-width: unset;\n    line-height: unset;\n    height: 21px;\n    }\n    .tags {\n    font-size: 11px;\n    color: #ddd;\n    border: 1px solid #555;\n    background-color: rgba(9, 116, 121, 0.31);\n    padding: 2px;\n    margin: 0 0px 0 5px;\n    }\n    .datarow td {\n    padding: 5px 0 0px 0px;\n    background-color: #404040;\n    }\n    .tagcol td {\n    padding: 0 0 10px 0;\n    background: #404040;\n    border-bottom: 10px solid #333;   \n    }\n    .tagcol {\n\n    }\n</style>\n\n<h3>Register of Light Zones</h3>\n\n<table cellspacing=\"0\" cellpadding=\"0\">\n    <tr style=\"font-weight:800; background-color:rgba(20,20,20,.6);\">\n        <td>ID</td>\n        <td>Name</td>\n        <td>Added</td>\n        <td>Delete*</td>\n    </tr>\n    <tr class=\"datarow\" ng-repeat-start=\"(key, value) in msg.zones\">\n        <td>{{key}}</td>\n        <td>{{value.friendly_name}}</td>\n        <td style=\"color:#888;\">{{value.created_time}} {{value.created_date}}</td>\n        <td><md-button ng-click=\"send({action: 'delete', topic: key})\">Del</md-button></td>\n    </tr>\n    <tr class=\"tagcol\" ng-repeat-end>\n        <td colspan=\"5\">\n            <span class=\"tags\" ng-repeat-start=\"val1 in value.fixtures\">{{val1}}</span>\n            <md-button class=\"minibutton\" ng-repeat-end ng-click=\"send({action: 'deletefixturemapping', topic: [key,val1]})\">x</md-button>\n            <span class=\"tags\" ng-repeat-start=\"val1 in value.sensors\">{{val1}}</span>\n            <md-button class=\"minibutton\" ng-repeat-end ng-click=\"send({action: 'deletesensormapping', topic: [key,val1]})\">x</md-button>\n        </td>\n    </tr>\n</table>\n","storeOutMessages":false,"fwdInMessages":false,"resendOnRefresh":true,"templateScope":"local","x":1290,"y":680,"wires":[["a8bcd4a4.cbeee8"]]},{"id":"a8bcd4a4.cbeee8","type":"function","z":"ccda7ca.4b72e8","name":"Set","func":"// get object from memory\n// NB we are using \"bracket notation\" just in case the ID\n// (i.e. the object name, represented here as msg.topic)\n// had a space\n\n\nif (msg.action == \"delete\") {\n    // delete zone (provided in msg.topic)\n    zones = global.get(\"home.light.config.zones\");\n    delete zones[msg.topic];\n    global.set(\"home.light.config.zones\", zones);\n    \n    // loop through all fixture mappings and delete any for the given zone\n    objMappings = global.get(\"home.light.config.fixture_zone_mappings\");\n    Object.keys(objMappings).forEach(key => {\n        if (objMappings[key].zoneID == msg.topic) {\n            delete objMappings[key]\n        }\n    })\n    // loop through all sensor mappings and delete any for the given zone\n    objMappings = global.get(\"home.light.config.sensor_zone_mappings\");\n    Object.keys(objMappings).forEach(key => {\n        if (objMappings[key].zoneID == msg.topic) {\n            delete objMappings[key]\n        }\n    })\n}\n\nif (msg.action == \"deletefixturemapping\") {\n    obj = global.get(\"home.light.config.fixture_zone_mappings\")\n    delete obj[msg.topic[0] + \"_\" + msg.topic[1]]\n    global.set(\"home.light.config.fixture_zone_mappings\", obj)\n}\nif (msg.action == \"deletesensormapping\") {\n    obj = global.get(\"home.light.config.sensor_zone_mappings\")\n    delete obj[msg.topic[0] + \"_\" + msg.topic[1]]\n    global.set(\"home.light.config.sensor_zone_mappings\", obj)\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1430,"y":680,"wires":[["8565246a.e7f2d8","9a29b343.663b7"]]},{"id":"40796360.d8e44c","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"Friendly Name","tooltip":"","group":"1386e1df.83b3ae","order":2,"width":3,"height":1,"passthru":true,"mode":"text","delay":"1000","topic":"","x":560,"y":680,"wires":[["d65b339e.001fd"]]},{"id":"d65b339e.001fd","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newzone.friendly_name","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":730,"y":680,"wires":[[]]},{"id":"c76218a2.b8a4d8","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"new_fixture_zone_mapping.fixtureID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":880,"wires":[[]]},{"id":"6d3c3af8.9cf694","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"1598a8ff.884b77","order":3,"width":1,"height":1,"passthru":false,"label":"Assign","tooltip":"","color":"","bgcolor":"","icon":"","payload":"nothing","payloadType":"str","topic":"","topicType":"str","x":230,"y":880,"wires":[["6590b1a0.37fd3"]]},{"id":"6590b1a0.37fd3","type":"function","z":"ccda7ca.4b72e8","name":"New fixture_zone_mapping","func":"// NEEDS RE-WRITING FOR FIXTURE TO ZONE ASSIGNMENT\n// ID will be automatically generated as per:\n// zoneID_fixtureID\n// if such an ID exists, then message: already exists in zone\n// Don't forget to update code for deleting a zone and\n// a fixture. Each should check for corresponding entries\n// in the mappings object and remove these entries\n\n\n// Save new zone entered in Dashboard to global context\n// Includes form validation and duplicate check\n// and supports clearing the form when done correctly\n\n// check form was filled in properly\nif (typeof flow.get(\"new_fixture_zone_mapping\") == 'undefined') {\n    msg.payload = \"You didn't enter anything - fixture not assigned\"\n    msg.error = true\n    return msg\n}\n\n// assume newzone object exists (some part of form was filled)\nvar new_fixture_zone_mapping = flow.get(\"new_fixture_zone_mapping\")\n\n// if form not complete\nif (typeof new_fixture_zone_mapping.fixtureID == 'undefined' ||\n           new_fixture_zone_mapping.fixtureID === \"\" ||\n    typeof new_fixture_zone_mapping.zoneID == 'undefined' ||\n           new_fixture_zone_mapping.zoneID === \"\") {\n    msg.payload = \"Missing info - fixture not assigned\"\n    msg.error = true\n    return msg\n}\n\n// if we've got this far, we have a good assignment to create\n// create global assignment object if it's not there\nif (typeof global.get(\"home.light.config.fixture_zone_mappings\") == 'undefined') {\n    global.set(\"home.light.config.fixture_zone_mappings\", {})\n}\n\n// get light fixture zone mappings object\nvar fixture_zone_mappings = global.get(\"home.light.config.fixture_zone_mappings\")\n\n// does mapping ID exist? (it will look like this: zoneID_fixtureID)\nvar newID = new_fixture_zone_mapping.zoneID + \"_\" + new_fixture_zone_mapping.fixtureID\n\nif (fixture_zone_mappings.hasOwnProperty(newID)) {\n    msg.payload = \"oops, fixture already added to zone\"\n    msg.error = true\n    return msg\n} else {\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    fixture_zone_mappings[newID] = {\n        \"zoneID\": new_fixture_zone_mapping.zoneID,        // technically not necessary\n        \"fixtureID\": new_fixture_zone_mapping.fixtureID,  // technically not necessary\n        \"created_date\": d,\n        \"created_time\": t\n    }\n    \n    global.set(\"home.light.config.fixture_zone_mappings\",fixture_zone_mappings)\n    msg.payload = \"Success - assigned fixture to zone\"\n    msg.error = false\n    // now remove item from flow context, otherwise our\n    // validation tests above will always pass\n    flow.set(\"new_fixture_zone_mapping\", undefined);\n    \n    return msg\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","x":340,"y":920,"wires":[["5e348cad.d1d274","b21bbc75.a1df1"]]},{"id":"5e348cad.d1d274","type":"ui_template","z":"ccda7ca.4b72e8","group":"1598a8ff.884b77","name":"New fixture-zone validation","order":4,"width":"8","height":1,"format":"{{msg.payload}}","storeOutMessages":true,"fwdInMessages":false,"resendOnRefresh":false,"templateScope":"local","x":820,"y":960,"wires":[[]]},{"id":"d68689da.6ecbc8","type":"delay","z":"ccda7ca.4b72e8","name":"delay clearing form","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":610,"y":1000,"wires":[["5e348cad.d1d274"]]},{"id":"b21bbc75.a1df1","type":"function","z":"ccda7ca.4b72e8","name":"Success","func":"// Save new zone: clear form & result if successful\n\nif (!msg.error) {\n    msg.payload = \"\"\n    return msg;\n}\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":420,"y":960,"wires":[["d68689da.6ecbc8","8bcb0afe.baab38","bcbb55c0.a26bf8","1170fc93.8b8a73"]]},{"id":"c6dcd744.bcc438","type":"change","z":"ccda7ca.4b72e8","name":"Get","rules":[{"t":"set","p":"fixture_zone_mappings","pt":"msg","to":"home.light.config.fixture_zone_mappings","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":1170,"y":900,"wires":[["3b08bea0.64d732"]]},{"id":"3b08bea0.64d732","type":"ui_template","z":"ccda7ca.4b72e8","group":"1598a8ff.884b77","name":"Fixture to Zone Mappings List","order":5,"width":"12","height":"12","format":"<h3>Register of Fixture to Zone Mappings</h3>\n\n<table>\n    <tr style=\"font-weight:800; background-color:rgba(20,20,20,.6);\">\n        <td>ID</td>\n        <td>Zone</td>\n        <td>Fixture</td>\n        <td>Added</td>\n        <td>Delete*</td>\n    </tr>\n    <tr ng-repeat=\"(key, value) in msg.fixture_zone_mappings\">\n        <td>{{key}}</td>\n        <td>{{value.zoneID}}</td>\n        <td>{{value.fixtureID}}</td>\n        <td style=\"color:#888;\">{{value.created_time}} {{value.created_date}}</td>\n        <td><md-button ng-click=\"send({action: 'delete', topic: key})\">Del</md-button></td>\n    </tr>\n</table>","storeOutMessages":false,"fwdInMessages":false,"resendOnRefresh":true,"templateScope":"local","x":1370,"y":900,"wires":[["cb9ef06c.ca2fb"]]},{"id":"cb9ef06c.ca2fb","type":"function","z":"ccda7ca.4b72e8","name":"Set","func":"// get object from memory\n// NB we are using \"bracket notation\" just in case the ID\n// (i.e. the object name, represented here as msg.topic)\n// had a space\n\nif (msg.action == \"delete\") {\n    obj = global.get(\"home.light.config.fixture_zone_mappings\")\n    delete obj[msg.topic]\n    global.set(\"home.light.config.fixture_zone_mappings\", obj)\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"x":1570,"y":900,"wires":[["aa3fb37d.ef248"]]},{"id":"eac0f136.73b53","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"new_fixture_zone_mapping.zoneID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":900,"wires":[[]]},{"id":"1e28ba9e.1499f5","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Fixture Select","label":"","tooltip":"","place":"Select Fixture","group":"1598a8ff.884b77","order":1,"width":"3","height":"1","passthru":true,"options":[],"payload":"","topic":"","x":720,"y":880,"wires":[["c76218a2.b8a4d8"]]},{"id":"8bcb0afe.baab38","type":"function","z":"ccda7ca.4b72e8","name":"","func":"msg.options = Object.keys((global.get(\"home.light.config.fixtures\")))\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":570,"y":880,"wires":[["1e28ba9e.1499f5"]]},{"id":"ce885af.b2359a8","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Zone Select","label":"","tooltip":"","place":"Select Zone","group":"1598a8ff.884b77","order":2,"width":"3","height":"1","passthru":true,"multiple":false,"options":[],"payload":"","topic":"","topicType":"str","x":710,"y":900,"wires":[["eac0f136.73b53"]]},{"id":"bcbb55c0.a26bf8","type":"function","z":"ccda7ca.4b72e8","name":"","func":"msg.options = Object.keys((global.get(\"home.light.config.zones\")))\nreturn msg;","outputs":1,"noerr":0,"x":570,"y":900,"wires":[["ce885af.b2359a8"]]},{"id":"8565246a.e7f2d8","type":"function","z":"ccda7ca.4b72e8","name":"Get","func":"// list out the zones\n// also show light fixtures and sensors assigned to each zone\n// as zones and assignments are two separate objects,\n// we shall insert the mappings for a given zone as an array into the\n// zone object returned\nmsg.zones = {}\nzones = global.get(\"home.light.config.zones\")\n\n// copy our zones into the msg to send out, also set up fixtures array\n// so we can populate this for the list view\nObject.keys(zones).forEach(key => {\n    msg.zones[key] = {\n        \"friendly_name\": zones[key].friendly_name,\n        \"created_date\": zones[key].created_date,\n        \"created_time\": zones[key].created_time,\n        \"fixtures\": [],\n        \"sensors\": []\n    }\n})\n\n\n// now populate fixtures / sensors arrays in each zone\n// loop through every mapping, get the zoneID, then insert the fixtureID and sensorID\n// into the corresponding zone now in msg.zones\n\nfixture_zone_mappings = global.get(\"home.light.config.fixture_zone_mappings\")\nsensor_zone_mappings = global.get(\"home.light.config.sensor_zone_mappings\")\n\nif (fixture_zone_mappings != undefined) {\n    Object.keys(fixture_zone_mappings).forEach(key => {\n        // (the IF ensures we don't insert fixture into zone that\n        // does not exist). It will just fail silently.\n        if (typeof msg.zones[fixture_zone_mappings[key].zoneID] !== 'undefined') {\n            msg.zones[fixture_zone_mappings[key].zoneID].fixtures.push(fixture_zone_mappings[key].fixtureID)\n        }\n    });\n}\n\nif (sensor_zone_mappings != undefined) {\n    Object.keys(sensor_zone_mappings).forEach(key => {\n        // (the IF ensures we don't insert sensor into zone that\n        // does not exist). It will just fail silently.\n        if (typeof msg.zones[sensor_zone_mappings[key].zoneID] !== 'undefined') {\n            msg.zones[sensor_zone_mappings[key].zoneID].sensors.push(sensor_zone_mappings[key].sensorID)\n        }\n    });\n}\n\nreturn msg","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1150,"y":680,"wires":[["6bb02cec.a26d14"]]},{"id":"91962f50.feee3","type":"link in","z":"ccda7ca.4b72e8","name":"To zone list","links":["1170fc93.8b8a73","1f8e94b.04cd86b","53c29071.edb86","69ff0c06.2b52d4","8b331eff.a4b6e","aa3fb37d.ef248","c37de6d7.ef0688","db706498.b0b6b8","e285855d.412b78"],"x":1035,"y":720,"wires":[["8565246a.e7f2d8"]]},{"id":"aa3fb37d.ef248","type":"link out","z":"ccda7ca.4b72e8","name":"From fixture_zone_mapping","links":["91962f50.feee3","ece7a8d6.395488","3f177b4a.22a414","f74fd150.29d7f","7fe576ed.d2ec88","2b26aa37.363d96","d6b0de0.f068f2","2b69fcd3.5b69f4","364c841c.bc8ecc","75987b30.116d54","a854f145.64a4b","f6f27716.55f7b8","4d57de4c.013d3","767ff68c.c416d8","f3978fd.fdfe17","261562b1.09abbe","d9df52ec.4ed04","ffa987ec.b665f8","779281d9.91715","1109235f.d53c9d","d3e2b7dc.c0ff88","f07b676a.dcdfd8","79adff9.9e114","13d841d7.aacc0e","a1e1812.f8de98","39ebbf52.80727","7a29adf8.2d8f84","40bcf1ed.94d2e"],"x":1635,"y":940,"wires":[]},{"id":"9a29b343.663b7","type":"link out","z":"ccda7ca.4b72e8","name":"From zone","links":["2b26aa37.363d96","2b69fcd3.5b69f4","364c841c.bc8ecc","7fe576ed.d2ec88","f74fd150.29d7f","1109235f.d53c9d","d3e2b7dc.c0ff88","f07b676a.dcdfd8","79adff9.9e114","13d841d7.aacc0e","a1e1812.f8de98","39ebbf52.80727","7a29adf8.2d8f84","40bcf1ed.94d2e","7f0c87d.f73ec78","d989246e.3904b8","6a35ae40.42b85","ecb553e.1423ab"],"x":1535,"y":720,"wires":[]},{"id":"2b26aa37.363d96","type":"link in","z":"ccda7ca.4b72e8","name":"To fixture_zone_mapping Select","links":["1f8e94b.04cd86b","53c29071.edb86","69ff0c06.2b52d4","9a29b343.663b7","aa3fb37d.ef248","e67b2e5d.8da8c","9d564828.64eea8","9e7d546c.cbfdd8","c97672de.165f2","571a004f.2fe8c","eb23c4a0.d5cdd8","437116d3.5fef88","c37de6d7.ef0688","7c941ae2.147274"],"x":375,"y":880,"wires":[["8bcb0afe.baab38","bcbb55c0.a26bf8"]]},{"id":"b5fbea0a.335bf8","type":"comment","z":"ccda7ca.4b72e8","name":"Create Fixture","info":"","x":130,"y":160,"wires":[]},{"id":"e41a74f5.aadc98","type":"comment","z":"ccda7ca.4b72e8","name":"Create Zone","info":"","x":150,"y":620,"wires":[]},{"id":"8f2fe5be.0d7728","type":"comment","z":"ccda7ca.4b72e8","name":"Assign fixture to zone","info":"","x":180,"y":840,"wires":[]},{"id":"69ff0c06.2b52d4","type":"link out","z":"ccda7ca.4b72e8","name":"From delete fixture","links":["2b26aa37.363d96","3f177b4a.22a414","7fe576ed.d2ec88","91962f50.feee3","ece7a8d6.395488","f74fd150.29d7f","d6b0de0.f068f2","2b69fcd3.5b69f4","364c841c.bc8ecc","75987b30.116d54","a854f145.64a4b","f6f27716.55f7b8","4d57de4c.013d3","767ff68c.c416d8","f3978fd.fdfe17","261562b1.09abbe","d9df52ec.4ed04","ffa987ec.b665f8","779281d9.91715","1109235f.d53c9d","d3e2b7dc.c0ff88","f07b676a.dcdfd8","79adff9.9e114","13d841d7.aacc0e","a1e1812.f8de98","39ebbf52.80727","7a29adf8.2d8f84","40bcf1ed.94d2e","7f0c87d.f73ec78","d989246e.3904b8","6a35ae40.42b85","ecb553e.1423ab"],"x":1515,"y":240,"wires":[]},{"id":"cce713b5.db9a6","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Resolution","label":"","tooltip":"","place":"Resolution","group":"1a37e545.435d2b","order":4,"width":3,"height":1,"passthru":true,"multiple":false,"options":[{"label":"Very Fine (1/100)","value":1,"type":"num"},{"label":"Fine (2/100)","value":2,"type":"num"},{"label":"Medium Fine (4/100)","value":4,"type":"num"},{"label":"Medium Fine (5/100)","value":5,"type":"num"},{"label":"Medium (10/100)","value":10,"type":"num"},{"label":"Medium Low (20/100)","value":20,"type":"num"},{"label":"Low (25/100)","value":25,"type":"num"},{"label":"Very Low (50/100)","value":50,"type":"num"}],"payload":"","topic":"","topicType":"str","x":590,"y":200,"wires":[["a02d1fa3.a8071"]]},{"id":"a02d1fa3.a8071","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newfixture.resolution","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":200,"wires":[[]]},{"id":"7dc6a4d.74efc5c","type":"inject","z":"ccda7ca.4b72e8","name":"Node-RED restart","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"2","topic":"","payload":"","payloadType":"date","x":290,"y":100,"wires":[["1f8e94b.04cd86b"]]},{"id":"1f8e94b.04cd86b","type":"link out","z":"ccda7ca.4b72e8","name":"From Node-RED Restart","links":["a1fd81a0.b58a3","91962f50.feee3","ecc09278.86274","2b26aa37.363d96","ece7a8d6.395488","3f177b4a.22a414","f74fd150.29d7f","7fe576ed.d2ec88","d6b0de0.f068f2","2b69fcd3.5b69f4","364c841c.bc8ecc","75987b30.116d54","a854f145.64a4b","f6f27716.55f7b8","4d57de4c.013d3","767ff68c.c416d8","f3978fd.fdfe17","261562b1.09abbe","d9df52ec.4ed04","ffa987ec.b665f8","779281d9.91715","1109235f.d53c9d","d3e2b7dc.c0ff88","f07b676a.dcdfd8","79adff9.9e114","13d841d7.aacc0e","a1e1812.f8de98","39ebbf52.80727","7a29adf8.2d8f84","40bcf1ed.94d2e","7f0c87d.f73ec78","d989246e.3904b8","31b74b7e.f8ff04","6a35ae40.42b85","ecb553e.1423ab"],"x":435,"y":100,"wires":[]},{"id":"a1fd81a0.b58a3","type":"link in","z":"ccda7ca.4b72e8","name":"To Fixtures List","links":["1f8e94b.04cd86b","e67b2e5d.8da8c","e285855d.412b78"],"x":1015,"y":240,"wires":[["b7655eb1.6ef5f"]]},{"id":"e67b2e5d.8da8c","type":"link out","z":"ccda7ca.4b72e8","name":"From New Fixture Creation","links":["2b26aa37.363d96","a1fd81a0.b58a3","1109235f.d53c9d","7f0c87d.f73ec78","d989246e.3904b8","6a35ae40.42b85","ecb553e.1423ab"],"x":435,"y":300,"wires":[]},{"id":"f0aa56c2.5db188","type":"comment","z":"ccda7ca.4b72e8","name":"List / Delete Fixtures","info":"","x":1070,"y":160,"wires":[]},{"id":"53c29071.edb86","type":"link out","z":"ccda7ca.4b72e8","name":"From New Zone Creation","links":["2b26aa37.363d96","91962f50.feee3","1109235f.d53c9d","7f0c87d.f73ec78","d989246e.3904b8","6a35ae40.42b85","ecb553e.1423ab"],"x":435,"y":780,"wires":[]},{"id":"dbc7ae4d.e3b7d","type":"comment","z":"ccda7ca.4b72e8","name":"List / Delete zones (and their fixture / sensor mappings)","info":"","x":1180,"y":640,"wires":[]},{"id":"1109235f.d53c9d","type":"link in","z":"ccda7ca.4b72e8","name":"To fixture_zone_mapping List","links":["1f8e94b.04cd86b","53c29071.edb86","69ff0c06.2b52d4","9a29b343.663b7","aa3fb37d.ef248","e67b2e5d.8da8c","1170fc93.8b8a73","e285855d.412b78","9d564828.64eea8","9e7d546c.cbfdd8","c97672de.165f2","571a004f.2fe8c","eb23c4a0.d5cdd8","437116d3.5fef88","c37de6d7.ef0688","7c941ae2.147274"],"x":1075,"y":900,"wires":[["c6dcd744.bcc438"]]},{"id":"1170fc93.8b8a73","type":"link out","z":"ccda7ca.4b72e8","name":"From Create Zone Mapping","links":["1109235f.d53c9d","2b69fcd3.5b69f4","364c841c.bc8ecc","7fe576ed.d2ec88","91962f50.feee3","f74fd150.29d7f","d3e2b7dc.c0ff88","f07b676a.dcdfd8","79adff9.9e114","13d841d7.aacc0e","a1e1812.f8de98","39ebbf52.80727","7a29adf8.2d8f84","40bcf1ed.94d2e"],"x":475,"y":1000,"wires":[]},{"id":"f20dea5f.062798","type":"comment","z":"ccda7ca.4b72e8","name":"List / Delete Mapping","info":"","x":1120,"y":860,"wires":[]},{"id":"533f99dc.58f5d8","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"ID","tooltip":"","group":"1f57d286.da6e6d","order":1,"width":3,"height":1,"passthru":false,"mode":"text","delay":"350","topic":"","topicType":"str","x":570,"y":420,"wires":[["3834df2d.ef81b"]]},{"id":"3834df2d.ef81b","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newsensor.ID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":420,"wires":[[]]},{"id":"7910b624.be79f8","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"1f57d286.da6e6d","order":5,"width":1,"height":1,"passthru":false,"label":"Save","tooltip":"","color":"","bgcolor":"","icon":"","payload":"nothing","payloadType":"str","topic":"","topicType":"str","x":270,"y":420,"wires":[["9b75f17f.2ab9c"]]},{"id":"4448a00b.958a7","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"Friendly location","tooltip":"","group":"1f57d286.da6e6d","order":2,"width":3,"height":1,"passthru":true,"mode":"text","delay":"1000","topic":"","topicType":"str","x":600,"y":440,"wires":[["605e54ba.ac59fc"]]},{"id":"605e54ba.ac59fc","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newsensor.friendly_location","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":440,"wires":[[]]},{"id":"9b75f17f.2ab9c","type":"function","z":"ccda7ca.4b72e8","name":"New sensor","func":"// Save new sensor entered in Dashboard to global context\n// Includes form validation and duplicate check\n// and supports clearing the form when done correctly\n\n// check form was filled in properly\nif (typeof flow.get(\"newsensor\") == 'undefined') {\n    msg.payload = \"You didn't enter anything - sensor not saved\"\n    msg.error = true\n    return msg\n}\n\n// assume newsensor object exists (some part of form was filled)\nvar newsensor = flow.get(\"newsensor\")\n\n// if form not complete\nif (typeof newsensor.ID == 'undefined' ||\n           newsensor.ID === \"\" ||\n    typeof newsensor.friendly_location == 'undefined' ||\n           newsensor.friendly_location === \"\" ) {\n    msg.payload = \"Missing info - sensor not saved\"\n    msg.error = true\n    return msg\n}\n\n// if we've got this far, we have a good new sensor to add\n// create global sensors object if it's not there\nif (typeof global.get(\"home.light.config.sensors\") == 'undefined') {\n    global.set(\"home.light.config.sensors\", {})\n}\n\n// get sensors object\nvar sensors = global.get(\"home.light.config.sensors\")\n\n// does sensors ID exist?\n\nif (sensors.hasOwnProperty(newsensor.ID)) {\n    msg.payload = \"oops, ID already exists\"\n    msg.error = true\n    return msg\n} else {\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    sensors[newsensor.ID] = {\n        \"current_setting\": {\n            \"pir_arm\": false,\n            \"microwave_arm\": false,\n            \"audio_trigger_arm\": false,\n            \"audio_extend_arm\": false,\n            \"audio_retrigger_arm\": false,\n            \"audio_retrigger_delay\": 10,\n            \"leds_on\": false,\n            \"audio_threshold\": 100,\n            \"lux_threshold\": 1,\n            \"pir_on\": false,\n            \"microwave_on\": false,\n            \"audio_trigger_on\": false\n        },\n        \"friendly_location\": newsensor.friendly_location,\n        \"led_IP\": newsensor.led_IP,\n        \"created_date\": d,\n        \"created_time\": t\n    }\n    \n    global.set(\"home.light.config.sensors\",sensors)\n    msg.payload = \"Success - added sensor\"\n    msg.error = false\n    // now remove item from flow context, otherwise our\n    // validation tests above will always pass\n    flow.set(\"newsensor\", undefined);\n    \n    return msg\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":460,"wires":[["227f2ba3.915e44","7b2eb89.5bed348"]]},{"id":"227f2ba3.915e44","type":"ui_template","z":"ccda7ca.4b72e8","group":"1f57d286.da6e6d","name":"New sensor validation","order":6,"width":"8","height":1,"format":"{{msg.payload}}","storeOutMessages":true,"fwdInMessages":false,"resendOnRefresh":false,"templateScope":"local","x":820,"y":520,"wires":[[]]},{"id":"e1fc71c5.6631b","type":"delay","z":"ccda7ca.4b72e8","name":"delay clearing form","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":590,"y":520,"wires":[["227f2ba3.915e44"]]},{"id":"7b2eb89.5bed348","type":"function","z":"ccda7ca.4b72e8","name":"Success","func":"// Save new fixture: clear form & result if successful\n\nif (!msg.error) {\n    msg.payload = \"\"\n    return msg;\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":500,"wires":[["e1fc71c5.6631b","533f99dc.58f5d8","4448a00b.958a7","7c941ae2.147274","6b83d162.e91af"]]},{"id":"6a0850c2.bd4cf","type":"change","z":"ccda7ca.4b72e8","name":"Get","rules":[{"t":"set","p":"sensors","pt":"msg","to":"home.light.config.sensors","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":1130,"y":440,"wires":[["95fb27d7.024168"]]},{"id":"95fb27d7.024168","type":"ui_template","z":"ccda7ca.4b72e8","group":"1f57d286.da6e6d","name":"Sensors List","order":7,"width":"12","height":"10","format":"<h3>Register of Sensors</h3>\n\n<table>\n    <tr style=\"font-weight:800; background-color:rgba(20,20,20,.6);\">\n        <td>ID</td>\n        <td>Location</td>\n        <td>LED IP</td>\n        <td>Added</td>\n        <td>Delete*</td>\n    </tr>\n    <tr ng-repeat=\"(key, value) in msg.sensors\">\n        <td>{{key}}</td>\n        <td>{{value.friendly_location}}</td>\n        <td>{{value.led_IP}}</td>\n        <td style=\"color:#888;\">{{value.created_time}} {{value.created_date}}</td>\n        <td><md-button ng-click=\"send({action: 'delete', topic: key})\">Del</md-button></td>\n    </tr>\n</table>","storeOutMessages":false,"fwdInMessages":false,"resendOnRefresh":true,"templateScope":"local","x":1270,"y":440,"wires":[["9840aacf.cf0358"]]},{"id":"9840aacf.cf0358","type":"function","z":"ccda7ca.4b72e8","name":"Set","func":"// get object from memory\n// NB we are using \"bracket notation\" just in case the ID\n// (i.e. the object name, represented here as msg.topic)\n// had a space\n\nif (msg.action == \"delete\") {\n    // delete the sensor\n    obj = global.get(\"home.light.config.sensors\")\n    delete obj[msg.topic]\n    global.set(\"home.light.config.sensors\", obj)\n\n    // delete any mappings this sensor had to a zone\n    objMappings = global.get(\"home.light.config.sensor_zone_mappings\");\n    Object.keys(objMappings).forEach(key => {\n        if (objMappings[key].sensorID == msg.topic) {\n            delete objMappings[key]\n        }\n    })\n    \n}\n\nmsg.payload=\"\"\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1410,"y":440,"wires":[["6a0850c2.bd4cf","c37de6d7.ef0688"]]},{"id":"30e45a7b.8ebed6","type":"comment","z":"ccda7ca.4b72e8","name":"Create Sensor","info":"","x":130,"y":400,"wires":[]},{"id":"c37de6d7.ef0688","type":"link out","z":"ccda7ca.4b72e8","name":"From delete fixture","links":["2b26aa37.363d96","3f177b4a.22a414","7fe576ed.d2ec88","91962f50.feee3","ece7a8d6.395488","f74fd150.29d7f","d6b0de0.f068f2","2b69fcd3.5b69f4","364c841c.bc8ecc","75987b30.116d54","a854f145.64a4b","f6f27716.55f7b8","4d57de4c.013d3","767ff68c.c416d8","f3978fd.fdfe17","261562b1.09abbe","d9df52ec.4ed04","ffa987ec.b665f8","779281d9.91715","1109235f.d53c9d","d3e2b7dc.c0ff88","f07b676a.dcdfd8","79adff9.9e114","13d841d7.aacc0e","a1e1812.f8de98","39ebbf52.80727","7a29adf8.2d8f84","40bcf1ed.94d2e","7f0c87d.f73ec78","d989246e.3904b8","6a35ae40.42b85","ecb553e.1423ab"],"x":1515,"y":480,"wires":[]},{"id":"31b74b7e.f8ff04","type":"link in","z":"ccda7ca.4b72e8","name":"To Sensors List","links":["1f8e94b.04cd86b","7c941ae2.147274","e285855d.412b78"],"x":1015,"y":480,"wires":[["6a0850c2.bd4cf"]]},{"id":"7c941ae2.147274","type":"link out","z":"ccda7ca.4b72e8","name":"From New Sensor Creation","links":["1109235f.d53c9d","2b26aa37.363d96","31b74b7e.f8ff04","6a35ae40.42b85","ecb553e.1423ab"],"x":435,"y":540,"wires":[]},{"id":"7f08a864.d8b638","type":"comment","z":"ccda7ca.4b72e8","name":"List / Delete Sensors","info":"","x":1070,"y":400,"wires":[]},{"id":"be9c5fda.ad76b","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"new_sensor_zone_mapping.sensorID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":1100,"wires":[[]]},{"id":"9c020368.fa405","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"a43ac519.bba528","order":3,"width":1,"height":1,"passthru":false,"label":"Assign","tooltip":"","color":"","bgcolor":"","icon":"","payload":"nothing","payloadType":"str","topic":"","topicType":"str","x":230,"y":1100,"wires":[["f2ba13a0.5602e"]]},{"id":"f2ba13a0.5602e","type":"function","z":"ccda7ca.4b72e8","name":"New sensor_zone_mapping","func":"\n// check form was filled in properly\nif (typeof flow.get(\"new_sensor_zone_mapping\") == 'undefined') {\n    msg.payload = \"You didn't enter anything - sensor not assigned\"\n    msg.error = true\n    return msg\n}\n\nvar new_sensor_zone_mapping = flow.get(\"new_sensor_zone_mapping\")\n\n// if form not complete\nif (typeof new_sensor_zone_mapping.sensorID == 'undefined' ||\n           new_sensor_zone_mapping.sensorID === \"\" ||\n    typeof new_sensor_zone_mapping.zoneID == 'undefined' ||\n           new_sensor_zone_mapping.zoneID === \"\") {\n    msg.payload = \"Missing info - sensor not assigned\"\n    msg.error = true\n    return msg\n}\n\n// if we've got this far, we have a good assignment to create\n// create global assignment object if it's not there\nif (typeof global.get(\"home.light.config.sensor_zone_mappings\") == 'undefined') {\n    global.set(\"home.light.config.sensor_zone_mappings\", {})\n}\n\n// get sensor zone mappings object\nvar sensor_zone_mappings = global.get(\"home.light.config.sensor_zone_mappings\")\n\n// does mapping ID exist? (it will look like this: zoneID_sensorID)\nvar newID = new_sensor_zone_mapping.zoneID + \"_\" + new_sensor_zone_mapping.sensorID\n\nif (sensor_zone_mappings.hasOwnProperty(newID)) {\n    msg.payload = \"oops, sensor already added to zone\"\n    msg.error = true\n    return msg\n} else {\n    d = new Date().toLocaleDateString(); t = new Date().toLocaleTimeString();\n    sensor_zone_mappings[newID] = {\n        \"zoneID\": new_sensor_zone_mapping.zoneID,        // technically not necessary\n        \"sensorID\": new_sensor_zone_mapping.sensorID,  // technically not necessary\n        \"created_date\": d,\n        \"created_time\": t\n    }\n    \n    global.set(\"home.light.config.sensor_zone_mappings\",sensor_zone_mappings)\n    msg.payload = \"Success - assigned sensor to zone\"\n    msg.error = false\n    // now remove item from flow context, otherwise our\n    // validation tests above will always pass\n    flow.set(\"new_sensor_zone_mapping\", undefined);\n    \n    return msg\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":340,"y":1140,"wires":[["271bf094.20928","2972c98d.d8a306"]]},{"id":"271bf094.20928","type":"ui_template","z":"ccda7ca.4b72e8","group":"a43ac519.bba528","name":"New sensor-zone validation","order":4,"width":"8","height":1,"format":"{{msg.payload}}","storeOutMessages":true,"fwdInMessages":false,"resendOnRefresh":false,"templateScope":"local","x":820,"y":1180,"wires":[[]]},{"id":"c8e8443a.cab358","type":"delay","z":"ccda7ca.4b72e8","name":"delay clearing form","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":610,"y":1220,"wires":[["271bf094.20928"]]},{"id":"2972c98d.d8a306","type":"function","z":"ccda7ca.4b72e8","name":"Success","func":"// Save new zone: clear form & result if successful\n\nif (!msg.error) {\n    msg.payload = \"\"\n    return msg;\n}\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":1180,"wires":[["c8e8443a.cab358","27369414.6a33dc","ae938760.52bc48","8b331eff.a4b6e"]]},{"id":"48aa3f53.18da","type":"change","z":"ccda7ca.4b72e8","name":"Get","rules":[{"t":"set","p":"sensor_zone_mappings","pt":"msg","to":"home.light.config.sensor_zone_mappings","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":1170,"y":1120,"wires":[["c7c5c14c.72491"]]},{"id":"c7c5c14c.72491","type":"ui_template","z":"ccda7ca.4b72e8","group":"a43ac519.bba528","name":"Sensor to Zone Mappings List","order":5,"width":"12","height":"12","format":"<h3>Register of Sensor to Zone Mappings</h3>\n\n<table>\n    <tr style=\"font-weight:800; background-color:rgba(20,20,20,.6);\">\n        <td>ID</td>\n        <td>Zone</td>\n        <td>Sensor</td>\n        <td>Added</td>\n        <td>Delete*</td>\n    </tr>\n    <tr ng-repeat=\"(key, value) in msg.sensor_zone_mappings\">\n        <td>{{key}}</td>\n        <td>{{value.zoneID}}</td>\n        <td>{{value.sensorID}}</td>\n        <td style=\"color:#888;\">{{value.created_time}} {{value.created_date}}</td>\n        <td><md-button ng-click=\"send({action: 'delete', topic: key})\">Del</md-button></td>\n    </tr>\n</table>","storeOutMessages":false,"fwdInMessages":false,"resendOnRefresh":true,"templateScope":"local","x":1370,"y":1120,"wires":[["feb0e2e3.c0061"]]},{"id":"feb0e2e3.c0061","type":"function","z":"ccda7ca.4b72e8","name":"Set","func":"// get object from memory\n// NB we are using \"bracket notation\" just in case the ID\n// (i.e. the object name, represented here as msg.topic)\n// had a space\n\nif (msg.action == \"delete\") {\n    obj = global.get(\"home.light.config.sensor_zone_mappings\")\n    delete obj[msg.topic]\n    global.set(\"home.light.config.sensor_zone_mappings\", obj)\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1570,"y":1120,"wires":[["db706498.b0b6b8"]]},{"id":"df9bb5cd.fd7a08","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"new_sensor_zone_mapping.zoneID","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":1120,"wires":[[]]},{"id":"f16583a0.ac22d","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Sensor Select","label":"","tooltip":"","place":"Select Sensor","group":"a43ac519.bba528","order":1,"width":"3","height":"1","passthru":true,"multiple":false,"options":[],"payload":"","topic":"","topicType":"str","x":720,"y":1100,"wires":[["be9c5fda.ad76b"]]},{"id":"27369414.6a33dc","type":"function","z":"ccda7ca.4b72e8","name":"","func":"msg.options = Object.keys((global.get(\"home.light.config.sensors\")))\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":570,"y":1100,"wires":[["f16583a0.ac22d"]]},{"id":"39a5bbe0.b3e8d4","type":"ui_dropdown","z":"ccda7ca.4b72e8","name":"Zone Select","label":"","tooltip":"","place":"Select Zone","group":"a43ac519.bba528","order":2,"width":"3","height":"1","passthru":true,"multiple":false,"options":[],"payload":"","topic":"","topicType":"str","x":710,"y":1120,"wires":[["df9bb5cd.fd7a08"]]},{"id":"ae938760.52bc48","type":"function","z":"ccda7ca.4b72e8","name":"","func":"msg.options = Object.keys((global.get(\"home.light.config.zones\")))\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":570,"y":1120,"wires":[["39a5bbe0.b3e8d4"]]},{"id":"db706498.b0b6b8","type":"link out","z":"ccda7ca.4b72e8","name":"From sensor_zone_mapping","links":["13d841d7.aacc0e","2b69fcd3.5b69f4","364c841c.bc8ecc","39ebbf52.80727","40bcf1ed.94d2e","6a35ae40.42b85","79adff9.9e114","7a29adf8.2d8f84","7fe576ed.d2ec88","91962f50.feee3","a1e1812.f8de98","d3e2b7dc.c0ff88","ecb553e.1423ab","f07b676a.dcdfd8","f74fd150.29d7f"],"x":1635,"y":1160,"wires":[]},{"id":"6a35ae40.42b85","type":"link in","z":"ccda7ca.4b72e8","name":"To sensor_zone_mapping Select","links":["1f8e94b.04cd86b","53c29071.edb86","69ff0c06.2b52d4","7c941ae2.147274","9a29b343.663b7","c37de6d7.ef0688","db706498.b0b6b8","e67b2e5d.8da8c"],"x":375,"y":1100,"wires":[["27369414.6a33dc","ae938760.52bc48"]]},{"id":"fa6fc496.5a3d48","type":"comment","z":"ccda7ca.4b72e8","name":"Assign sensor to zone","info":"","x":180,"y":1060,"wires":[]},{"id":"ecb553e.1423ab","type":"link in","z":"ccda7ca.4b72e8","name":"To sensor_zone_mapping List","links":["1f8e94b.04cd86b","53c29071.edb86","69ff0c06.2b52d4","7c941ae2.147274","8b331eff.a4b6e","9a29b343.663b7","c37de6d7.ef0688","db706498.b0b6b8","e285855d.412b78","e67b2e5d.8da8c"],"x":1075,"y":1120,"wires":[["48aa3f53.18da"]]},{"id":"8b331eff.a4b6e","type":"link out","z":"ccda7ca.4b72e8","name":"From Create Sensor Zone Mapping","links":["13d841d7.aacc0e","2b69fcd3.5b69f4","364c841c.bc8ecc","39ebbf52.80727","40bcf1ed.94d2e","79adff9.9e114","7a29adf8.2d8f84","7fe576ed.d2ec88","91962f50.feee3","a1e1812.f8de98","d3e2b7dc.c0ff88","ecb553e.1423ab","f07b676a.dcdfd8","f74fd150.29d7f"],"x":475,"y":1220,"wires":[]},{"id":"3da6af71.7fa62","type":"comment","z":"ccda7ca.4b72e8","name":"List / Delete Mapping","info":"","x":1120,"y":1080,"wires":[]},{"id":"6b83d162.e91af","type":"ui_text_input","z":"ccda7ca.4b72e8","name":"","label":"LED IP Address","tooltip":"","group":"1f57d286.da6e6d","order":2,"width":3,"height":1,"passthru":true,"mode":"text","delay":"1000","topic":"","topicType":"str","x":600,"y":460,"wires":[["8953e523.075568"]]},{"id":"8953e523.075568","type":"change","z":"ccda7ca.4b72e8","name":"interim set","rules":[{"t":"set","p":"newsensor.led_IP","pt":"flow","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":460,"wires":[[]]},{"id":"b3bbf342.cac3d","type":"comment","z":"ccda7ca.4b72e8","name":"New user install instructions","info":"Process\n-----\nDashboard > theme > set to dark\nDashboard > site > set sizes as follows: horizontal 74, 6, 2, 6 and vertical 37, 6, 3, 4\n\nImport the fixture/zone/sensor dashboard, which enables you to set up zones, lights, sensors, etc.\n\nIn dashboard create some lights, a zone, and assign lights to zone. The IDs should be something like\nzoneID = gf_kitchen\nzone friendly name = Ground Floor Kitchen\n\nfixtureID = gf_kitchen_ceiling\nfixture friendly location = Kitchen\nfixture friendly name = Ceiling\n\nCreate a multisensor and assign it to a zone. (Leave IP address blank, I just use that for controlling LEDs on my multisensor which is optional)\n\nThen import a zone UI flow\n- change the incoming MQTT path to match the zone ID you created but keep the rest of that path, e.g. home/light/gf_kitchen/scene\n\nConfigure that MQTT input to your MQTT server\n\nCtrl-double click on Actuate and Store Light to open the subflow and change the MQTT output to configure with your MQTT server.\n\nDouble click on GetUI and change the zonename to match the zone that you want to control.\n\nNow edit the two template nodes and change the name of the UI tab that you want.\n\nWhen creating additional zones, you do this from dashboard in order to set up lights and assign them to zones. Then you come into back end to actually add the UI for that zone by copying an existing one, pasting it underneath, then changing the MQTT path and the zonename in GetUI.\n\nSo how do you get stuff out of this, to actually control the lights? Control messages come out by MQTT and you hook your lights onto an MQTT input node set with the path like this:\n\nhome/light/fixtureID\n\nDepending on the light type, it will send a certain type of message, (on/off, dimming, colour, etc.) - attach a debug node and change the light to see what you get.\n\nWhat I prefer to do is take that message and reformat it for different things I want to control, e.g. Philips Hue, Tasmotas, Sonoffs, Shelly dimmers, KNX lights, LightwaveRF dimmers, WLED, or perhaps Z-Wave lights controlled over MQTT from another system.\n\n\nThing to fix:\n(maybe already fixed as removed \"typeof\" when checking that flow.newzone exists)\n\nWhen you first create a new zone, it says \"missing info zone not saved\". But you can click it again and it will work.\n\n","x":200,"y":60,"wires":[]},{"id":"b3ab7386.a9c5d","type":"inject","z":"ccda7ca.4b72e8","name":"PIR","props":[{"p":"payload.Switch1.Action","v":"ON","vt":"str"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"sonoffs/multisensor-003/stat/RESULT","x":130,"y":1480,"wires":[["befe0c23.03f99"]]},{"id":"217d5ed.464eea2","type":"inject","z":"ccda7ca.4b72e8","name":"Microwave","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"sonoffs/multisensor-003/stat/RESULT","payload":"","payloadType":"date","x":120,"y":1540,"wires":[["1d7298ca.9f09c7"]]},{"id":"cb4122f6.30776","type":"inject","z":"ccda7ca.4b72e8","name":"Noise","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"sonoffs/multisensor-003/stat/RESULT","payload":"","payloadType":"date","x":130,"y":1600,"wires":[["b2edb8f7.c36928"]]},{"id":"b2edb8f7.c36928","type":"trigger","z":"ccda7ca.4b72e8","name":"","op1":"{\"Switch3\":{\"Action\":\"ON\"}}","op2":"{\"Switch3\":{\"Action\":\"OFF\"}}","op1type":"str","op2type":"str","duration":"8","extend":false,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":280,"y":1580,"wires":[["ca1a80a.b4b928"]]},{"id":"1d7298ca.9f09c7","type":"trigger","z":"ccda7ca.4b72e8","name":"","op1":"{\"Switch2\":{\"Action\":\"ON\"}}","op2":"{\"Switch2\":{\"Action\":\"OFF\"}}","op1type":"str","op2type":"str","duration":"4","extend":false,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":280,"y":1540,"wires":[["ca1a80a.b4b928"]]},{"id":"befe0c23.03f99","type":"trigger","z":"ccda7ca.4b72e8","name":"","op1":"{\"Switch1\":{\"Action\":\"ON\"}}","op2":"{\"Switch1\":{\"Action\":\"OFF\"}}","op1type":"str","op2type":"str","duration":"4","extend":false,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":280,"y":1500,"wires":[["ca1a80a.b4b928"]]},{"id":"ca1a80a.b4b928","type":"json","z":"ccda7ca.4b72e8","name":"","property":"payload","action":"","pretty":false,"x":450,"y":1540,"wires":[["cb6e1622.0e0ba8"]]},{"id":"cb6e1622.0e0ba8","type":"function","z":"ccda7ca.4b72e8","name":"Sensor Inputs","func":"// convert Tasmota sensor readings (presence only) into something more simple / readable\n// filter out messages that are not related to presence sensing\n\nif (msg.payload != undefined) {\n    // PIR\n    if (msg.payload.Switch1 != undefined) {\n        if (msg.payload.Switch1.Action === \"ON\") msg.pir_on = true; else msg.pir_on = false\n        delete msg.payload\n        msg.topic = msg.topic.split(\"/\")[1]\n        msg.action = \"sensor\"\n        return msg;\n    }\n    // microwave\n    if (msg.payload.Switch2 != undefined) {\n        if (msg.payload.Switch2.Action === \"ON\") msg.microwave_on = true; else msg.microwave_on = false\n        delete msg.payload\n        msg.topic = msg.topic.split(\"/\")[1]\n        msg.action = \"sensor\"\n        return msg;\n    }\n    // audio\n    if (msg.payload.Switch3 != undefined) {\n        if (msg.payload.Switch3.Action === \"ON\") msg.audio_trigger_on = true; else msg.audio_trigger_on = false\n        delete msg.payload\n        msg.topic = msg.topic.split(\"/\")[1]\n        msg.action = \"sensor\"\n        return msg;\n    }\n}\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":600,"y":1540,"wires":[["4de6c2e5.b3a70c"]]},{"id":"ad3f5e39.c29e2","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"363d1eb5.19b652","order":1,"width":"2","height":"1","passthru":false,"label":"PIR Btn","tooltip":"","color":"","bgcolor":"","icon":"","payload":"PIR","payloadType":"str","topic":"sonoffs/multisensor-003/stat/RESULT","topicType":"str","x":140,"y":1500,"wires":[["befe0c23.03f99"]]},{"id":"e759d771.d35ad8","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"363d1eb5.19b652","order":2,"width":"2","height":"1","passthru":false,"label":"Micro Btn","tooltip":"","color":"","bgcolor":"","icon":"","payload":"Micro","payloadType":"str","topic":"sonoffs/multisensor-003/stat/RESULT","topicType":"str","x":140,"y":1560,"wires":[["1d7298ca.9f09c7"]]},{"id":"e30ec11f.b23d8","type":"ui_button","z":"ccda7ca.4b72e8","name":"","group":"363d1eb5.19b652","order":3,"width":"2","height":"1","passthru":false,"label":"Aud Btn","tooltip":"","color":"","bgcolor":"","icon":"","payload":"Audio","payloadType":"str","topic":"sonoffs/multisensor-003/stat/RESULT","topicType":"str","x":140,"y":1620,"wires":[["b2edb8f7.c36928"]]},{"id":"94e00b8c.eb8c58","type":"function","z":"ccda7ca.4b72e8","name":"Turn lights off!","func":"// Inject node set to repeat every second fires this off\n// Each second we check if there are any outstanding lights on\n// If so, check if the current timestamp is higher than the timestamp it was supposed to go off\n// Turn lights off if so\n\nzones = global.get(\"home.light.config.zones\")\n\nObject.keys(zones).forEach(key => {\n    if (typeof zones[key].triggered != undefined && zones[key].timer_run) { // if zone lights are currently on having been triggered by the sensor\n        if (msg.payload > zones[key].sensor_timeout) { // if sensor timeout has passed\n            node.send({\"payload\": \"0\", \"topic\": \"home/light/\" + key + \"/scene\"})\n            global.set(\"home.light.config.zones.\" + key + \".triggered\", false)\n            global.set(\"home.light.config.zones.\" + key + \".timer_run\", false)\n        }\n    }\n})\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":1480,"wires":[["e5ef831f.23cbb"]]},{"id":"ba2287c0.bf4a78","type":"inject","z":"ccda7ca.4b72e8","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":670,"y":1440,"wires":[["94e00b8c.eb8c58"]]},{"id":"e5ef831f.23cbb","type":"mqtt out","z":"ccda7ca.4b72e8","name":"","topic":"","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"b144405e.a9f63","x":910,"y":1520,"wires":[]},{"id":"71ad0f41.51a43","type":"function","z":"ccda7ca.4b72e8","name":"Output to Sensor LEDs","func":"// Turn the multisensor lights on\n// NOTE - if you update this, also update the instance within the subflow \"actuate and store light\"\n// That version is there to ensure that if you turn off the LED indicator mode, it immediately turns off the LEDs\n\nswitch (msg.payload) {\n    case false : {\n        switch (msg.topic) {\n            case \"pirLED\" : msg.payload = {\"seg\":{\"i\":[6,[0,0,0]]}}; break;\n            case \"micLED\" : msg.payload = {\"seg\":{\"i\":[7,[0,0,0]]}}; break;\n            case \"audLED\" : msg.payload = {\"seg\":{\"i\":[8,[0,0,0]]}}; break;\n        }\n    } break;\n    case true  : {\n        switch (msg.topic) {\n            case \"pirLED\" : msg.payload = {\"seg\":{\"i\":[6,[0,10,0]]}}; break;\n            case \"micLED\" : msg.payload = {\"seg\":{\"i\":[7,[10,0,0]]}}; break;\n            case \"audLED\" : msg.payload = {\"seg\":{\"i\":[8,[221,114,48]]}}; break;\n        }\n    } break;\n}\n\nmsg.url = \"http://\" + msg.led_IP + \"/json/state\"\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":850,"y":1640,"wires":[["4ecb14ed.23548c"]]},{"id":"4ecb14ed.23548c","type":"http request","z":"ccda7ca.4b72e8","name":"Action Sensor LEDs (HTTP)","method":"POST","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":960,"y":1660,"wires":[[]]},{"id":"4de6c2e5.b3a70c","type":"function","z":"ccda7ca.4b72e8","name":"Respond to Sensor","func":"// Output 1 = lighting trigger\n// Output 2 = HTTP to LEDs on sensor\n\n// Note: right now we store each sensor's settings in the sensor object.\n// We should store them in the zone object! That way, each instance of a given sensor can have different settings\n// depending on the zone. Wouldn't that be awesome?\n\n// Here we respond to Sensor actions, i.e. there was movement\n// The sensor message is prepped before it arrives here into something like:\n// msg = {\"action\": \"sensor\", \"pir_on\": [bool], \"topic\": \"multisensor-004\"}\n\n// NOTE: when movement sensor goes ON, we actually just set a scene. We don't start the timer.\n// Instead we start the timer when the movement sensor goes OFF. This is to prevent the case where presence shows continuously\n// beyond timer timeout. Despite movement continuing, lights would go out.\n// Now let's say the PIR goes on then quickly off, our timeout has now started. But what if it then goes on and stays on?\n// That timer could come to an end again, and lights would go off. So that's why we actually turn the timer OFF when the PIR goes\n// on. Seems counter-intuitive, but works to prevent the lights being turned off in this case.\n// You may ask \"given all this faff, why don't we ignore sensor ON signals and just start timer upon the OFF?\"\n// Well that way, the lights wouldn't come on immediately!\n// So now, PIR goes on, and lights stay on, any timer cancelled. PIR goes off and timer starts.\n\n\nif (msg.action === \"sensor\") {\n    // We have a sensor input!\n    // Check if we should output back to the indicator lights on the sensor\n    ledstatus = global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.leds_on\")\n    // get IP address of WLED within multisensor (if needed)\n    if (ledstatus) ip = global.get(\"home.light.config.sensors.\" + msg.topic + \".led_IP\")\n    // Loop through each zone the sensor applies to, build-up an array of info needed for each zone. This is a standalone array\n    mappings = global.get(\"home.light.config.sensor_zone_mappings\") // sensor-zone mappings\n    trigger = []\n    Object.keys(mappings).forEach(key => {\n        if (mappings[key].sensorID == msg.topic) {\n            defaultscene = global.get(\"home.light.config.zones.\" + mappings[key].zoneID + \".defaultscene\") // default scene to come on\n            delay = global.get(\"home.light.config.zones.\" + mappings[key].zoneID + \".sensor_timer\") * 1000 // sensor time delay\n            date=new Date(); timestamp = date.getTime();\n            timeout = timestamp + delay\n            topic = \"home/light/\" + mappings[key].zoneID + \"/scene\" // MQTT path for setting the scene\n            trigger.push({\"zone\": mappings[key].zoneID, \"topic\":topic, \"timeout\":timeout, \"scene\":defaultscene}) // push into the array\n        }\n    })\n\n\n    if (msg.pir_on != undefined) {\n        global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.pir_on\",msg.pir_on)     // update memory\n        if (ledstatus && ip != undefined) node.send([null,{\"topic\":\"pirLED\",\"payload\":msg.pir_on,\"led_IP\":ip}])      // Do indicator LEDs\n        /* Do scene change */\n        pir_armed = global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.pir_arm\")\n        trigger.forEach(function(triggeritem) { // for each mapping of the sensor to a zone\n            if (msg.pir_on && pir_armed) { // if the message was an ON, just turn lights on and do nothing else\n                node.send([{\"topic\": triggeritem.topic, \"payload\": triggeritem.scene},null])\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\", false) // SEE NOTE\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".triggered\", true) // SEE NOTE\n            } else if (!msg.pir_on && pir_armed) {\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".sensor_timeout\", triggeritem.timeout)\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\", true)\n                node.send([{\"payload\":\"nothing\", \"topic\": \"nothing\"},null]) // return message to trigger update of UI\n            } else if (!pir_armed) node.send([{\"payload\":\"nothing\", \"topic\": \"nothing\"},null]) // return message to trigger update of UI\n        })\n    }\n    if (msg.microwave_on != undefined) {\n        global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.microwave_on\",msg.microwave_on) // update memory\n        if (ledstatus && ip != undefined) node.send([null,{\"topic\":\"micLED\",\"payload\":msg.microwave_on,\"led_IP\":ip}])      // Do indicator LEDs\n        /* Do scene change */\n        microwave_armed = global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.microwave_arm\")\n        trigger.forEach(function(triggeritem) { // for each mapping of the sensor to a zone\n            if (msg.microwave_on && microwave_armed) { // if the message was an ON, just turn lights on and do nothing else\n                node.send([{\"topic\": triggeritem.topic, \"payload\": triggeritem.scene},null])\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\", false) // SEE NOTE\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".triggered\", true) // SEE NOTE\n            } else if (!msg.microwave_on && microwave_armed) {\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".sensor_timeout\", triggeritem.timeout)\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\", true)\n                node.send([{\"payload\":\"nothing\", \"topic\": \"nothing\"},null]) // return a null message, to trigger update of UI\n            } else if (!microwave_armed) node.send([{\"payload\":\"nothing\", \"topic\": \"nothing\"},null]) // return message to trigger update of UI\n        })\n    }\n    if (msg.audio_trigger_on != undefined) {\n        global.set(\"home.light.config.sensors.\" + msg.topic + \".current_setting.audio_trigger_on\",msg.audio_trigger_on) // update memory\n        if (ledstatus && ip != undefined) node.send([null,{\"topic\":\"audLED\",\"payload\":msg.audio_trigger_on,\"led_IP\":ip}])      // Do indicator LEDs\n        /* Do scene change */\n        audio_trigger_armed = global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.audio_trigger_arm\")\n        audio_extend_armed = global.get(\"home.light.config.sensors.\" + msg.topic + \".current_setting.audio_extend_arm\")\n        trigger.forEach(function(triggeritem) { // for each mapping of the sensor to a zone\n            triggered = global.get(\"home.light.config.zones.\" + triggeritem.zone + \".triggered\")\n            timer_run = global.get(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\")\n            if (msg.audio_trigger_on && audio_trigger_armed) { // if the message was an ON, just turn lights on and do nothing else\n                node.send([{\"topic\": triggeritem.topic, \"payload\": triggeritem.scene},null])\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\", false) // SEE NOTE\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".triggered\", true) // SEE NOTE\n            } else if (!msg.audio_trigger_on && audio_trigger_armed) {\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".sensor_timeout\", triggeritem.timeout)\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\", true)\n                node.send([{\"payload\":\"nothing\", \"topic\": \"nothing\"},null]) // return a null message, to trigger update of UI\n            } else if (!audio_trigger_armed) node.send([{\"payload\":\"nothing\", \"topic\": \"nothing\"},null]) // return message to trigger update of UI\n\n            if (msg.audio_trigger_on && audio_extend_armed && triggered) {\n                // turn off timer_run, do nothing to light, and keep triggered true\n                // Essentially the same as the others, but we are not turning on the trigger.\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\", false)\n                node.send([{\"payload\": \"nothing\", \"topic\": \"nothing\"},null]) // return a null message, to trigger update of UI\n            } else if (!msg.audio_trigger_on && audio_extend_armed) {\n                // start timer_run, do nothing\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".sensor_timeout\", triggeritem.timeout)\n                global.set(\"home.light.config.zones.\" + triggeritem.zone + \".timer_run\", true)\n                node.send([{\"payload\": \"nothing\", \"topic\": \"nothing\"},null]) // return a null message, to trigger update of UI\n            }\n        })\n    }\n}\n\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":710,"y":1580,"wires":[["e5ef831f.23cbb","9f1a49ab.784ae8"],["71ad0f41.51a43"]]},{"id":"9f1a49ab.784ae8","type":"link out","z":"ccda7ca.4b72e8","name":"From sensor actions","links":["13d841d7.aacc0e","2b69fcd3.5b69f4","364c841c.bc8ecc","39ebbf52.80727","40bcf1ed.94d2e","79adff9.9e114","7a29adf8.2d8f84","7fe576ed.d2ec88","a1e1812.f8de98","d3e2b7dc.c0ff88","f07b676a.dcdfd8","f74fd150.29d7f"],"x":875,"y":1560,"wires":[]},{"id":"4e49417.6784dc","type":"ui_template","z":"ccda7ca.4b72e8","group":"314e6a71.12bc56","name":"Zone Control","order":1,"width":"6","height":"12","format":"","storeOutMessages":false,"fwdInMessages":false,"resendOnRefresh":true,"templateScope":"local","x":490,"y":1920,"wires":[["a95cb12a.74b82"]]},{"id":"7a70cd82.1922e4","type":"ui_template","z":"ccda7ca.4b72e8","group":"314e6a71.12bc56","name":"Scene Create/Udpate/Delete","order":2,"width":"6","height":"4","format":"","storeOutMessages":false,"fwdInMessages":false,"resendOnRefresh":true,"templateScope":"local","x":540,"y":1960,"wires":[["ef5f60c6.65eaa"]]},{"id":"6c6218de.a57488","type":"mqtt in","z":"ccda7ca.4b72e8","name":"","topic":"home/light/3f_living/scene","qos":"2","datatype":"auto","broker":"b144405e.a9f63","nl":false,"rap":false,"x":330,"y":1880,"wires":[["8b38a638.f7b278"]]},{"id":"364c841c.bc8ecc","type":"link in","z":"ccda7ca.4b72e8","name":"To Zone Fixture Controls","links":["1170fc93.8b8a73","1f8e94b.04cd86b","69ff0c06.2b52d4","9a29b343.663b7","aa3fb37d.ef248","571a004f.2fe8c","eb23c4a0.d5cdd8","c37de6d7.ef0688","db706498.b0b6b8","8b331eff.a4b6e","370c7098.c68de","9f1a49ab.784ae8"],"x":195,"y":1940,"wires":[["25636c8a.cb0674"]]},{"id":"25636c8a.cb0674","type":"subflow:11371068.5599d","z":"ccda7ca.4b72e8","name":"","env":[{"name":"zonename","value":"3f_living","type":"str"},{"name":"show_zone_adjustment","value":"false","type":"bool"}],"x":330,"y":1940,"wires":[["4e49417.6784dc"],["7a70cd82.1922e4"]]},{"id":"a95cb12a.74b82","type":"subflow:2aa5ea75.282586","z":"ccda7ca.4b72e8","name":"","env":[],"x":790,"y":1920,"wires":[["25636c8a.cb0674"]]},{"id":"ef5f60c6.65eaa","type":"subflow:8d766ae8.a58e68","z":"ccda7ca.4b72e8","name":"","env":[],"x":800,"y":1960,"wires":[["25636c8a.cb0674"]]},{"id":"8b38a638.f7b278","type":"subflow:8ee756d3.15bbc8","z":"ccda7ca.4b72e8","name":"Trigger Scene","env":[],"x":580,"y":1880,"wires":[["a95cb12a.74b82"]]},{"id":"1a37e545.435d2b","type":"ui_group","name":"New Fixture","tab":"869c06ba.dfea88","order":2,"disp":true,"width":"12","collapse":false},{"id":"1386e1df.83b3ae","type":"ui_group","name":"New Zone","tab":"869c06ba.dfea88","order":3,"disp":true,"width":"12","collapse":false},{"id":"1598a8ff.884b77","type":"ui_group","name":"Fixture to Zone Assignment","tab":"869c06ba.dfea88","order":4,"disp":true,"width":"12","collapse":false},{"id":"1f57d286.da6e6d","type":"ui_group","name":"New Multisensor","tab":"869c06ba.dfea88","order":5,"disp":true,"width":"12","collapse":false},{"id":"a43ac519.bba528","type":"ui_group","name":"Sensor to Zone Assignment","tab":"869c06ba.dfea88","order":6,"disp":true,"width":"12","collapse":false},{"id":"363d1eb5.19b652","type":"ui_group","name":"Sense","tab":"79f7425a.a73e1c","order":3,"disp":true,"width":"6","collapse":false},{"id":"b144405e.a9f63","type":"mqtt-broker","name":"MQTT Server","broker":"10.1.1.1","port":"1883","clientid":"nodered","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"314e6a71.12bc56","type":"ui_group","name":"Light","tab":"8cd9325b.caa1a","order":1,"disp":true,"width":"6","collapse":true},{"id":"869c06ba.dfea88","type":"ui_tab","name":"Manage Lighting","icon":"dashboard","order":8,"disabled":false,"hidden":false},{"id":"79f7425a.a73e1c","type":"ui_tab","name":"Bedroom","icon":"dashboard","order":2},{"id":"8cd9325b.caa1a","type":"ui_tab","name":"Living Room","icon":"dashboard","order":1,"disabled":false,"hidden":false}]
